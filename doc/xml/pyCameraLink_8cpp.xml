<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="pyCameraLink_8cpp" kind="file" language="C++">
    <compoundname>pyCameraLink.cpp</compoundname>
    <includes refid="CameraLink_8h" local="yes">CameraLink.h</includes>
    <includes refid="Jai__lib_2export_8h" local="yes">export.h</includes>
    <includes local="no">numpy/ndarrayobject.h</includes>
    <includes local="no">datetime.h</includes>
    <includes local="yes">structmember.h</includes>
    <incdepgraph>
      <node id="705">
        <label>structmember.h</label>
      </node>
      <node id="700">
        <label>SisoDisplay.h</label>
      </node>
      <node id="696">
        <label>string</label>
      </node>
      <node id="698">
        <label>map</label>
      </node>
      <node id="695">
        <label>memory.h</label>
      </node>
      <node id="704">
        <label>datetime.h</label>
      </node>
      <node id="697">
        <label>typeinfo</label>
      </node>
      <node id="691">
        <label>Python.h</label>
      </node>
      <node id="692">
        <label>unistd.h</label>
      </node>
      <node id="702">
        <label>utility</label>
      </node>
      <node id="694">
        <label>iostream</label>
      </node>
      <node id="689">
        <label>/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp</label>
        <link refid="pyCameraLink_8cpp"/>
        <childnode refid="690" relation="include">
        </childnode>
        <childnode refid="701" relation="include">
        </childnode>
        <childnode refid="703" relation="include">
        </childnode>
        <childnode refid="704" relation="include">
        </childnode>
        <childnode refid="705" relation="include">
        </childnode>
      </node>
      <node id="690">
        <label>CameraLink.h</label>
        <link refid="CameraLink_8h_source"/>
        <childnode refid="691" relation="include">
        </childnode>
        <childnode refid="692" relation="include">
        </childnode>
        <childnode refid="693" relation="include">
        </childnode>
        <childnode refid="694" relation="include">
        </childnode>
        <childnode refid="695" relation="include">
        </childnode>
        <childnode refid="696" relation="include">
        </childnode>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="698" relation="include">
        </childnode>
        <childnode refid="699" relation="include">
        </childnode>
        <childnode refid="700" relation="include">
        </childnode>
      </node>
      <node id="699">
        <label>fgrab_prototyp.h</label>
      </node>
      <node id="701">
        <label>export.h</label>
        <link refid="Jai__lib_2export_8h_source"/>
        <childnode refid="690" relation="include">
        </childnode>
        <childnode refid="702" relation="include">
        </childnode>
      </node>
      <node id="693">
        <label>stdio.h</label>
      </node>
      <node id="703">
        <label>numpy/ndarrayobject.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__videocapture_1ga995fe516cc30d63ee61d8ba8addae4bc" prot="public" static="no" mutable="no">
        <type><ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref> *</type>
        <definition>CaptureCAM_CL* capt</definition>
        <argsstring></argsstring>
        <name>capt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="26" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__videocapture_1gac5efdaa19361d99c6aad5655b22f37d4" prot="public" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* myDict</definition>
        <argsstring></argsstring>
        <name>myDict</name>
        <initializer>= PyDict_New()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="27" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__videocapture_1ga77544bdfcd720ea2b6f071b4a7a15a3f" prot="public" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* rslt</definition>
        <argsstring></argsstring>
        <name>rslt</name>
        <initializer>= PyTuple_New(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="28" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__videocapture_1ga41628769fdff45ffe979265b06f8a648" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* array_buffer</definition>
        <argsstring></argsstring>
        <name>array_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="29" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__videocapture_1gaafc96ff152ed42d3faf6972917aaaf96" prot="public" static="yes" mutable="no">
        <type>PyMemberDef</type>
        <definition>PyMemberDef VideoCapture_members[]</definition>
        <argsstring>[]</argsstring>
        <name>VideoCapture_members</name>
        <initializer>= {
    {NULL} 
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="475" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__videocapture_1ga507495110ffc7e89fc4b9c95fcfb74c8" prot="public" static="yes" mutable="no">
        <type>PyMethodDef</type>
        <definition>PyMethodDef VideoCapture_methods[]</definition>
        <argsstring>[]</argsstring>
        <name>VideoCapture_methods</name>
        <initializer>= {
	 {&quot;read&quot;, (PyCFunction)<ref refid="group__videocapture_1ga8d6345ea87da8d740282da893242e25f" kindref="member">VideoCapture_fgread</ref>, METH_NOARGS,
	 &quot;read a frame from ximea device, return a tuple containing a bool (true= success, false= fail) and a dictionnary with a ndarray and meta data.&quot;},
	 {&quot;set&quot;, (PyCFunction)<ref refid="group__videocapture_1ga9ffd6bd67eb9921066ca6290ceab7eaf" kindref="member">VideoCapture_set</ref>, METH_VARARGS,
	 &quot;set the configuration parameter specified of a ximea device&quot;},
	 {&quot;get&quot;, (PyCFunction)<ref refid="group__videocapture_1gae26ee5dffe8b0bd008f5f8900415acdc" kindref="member">VideoCapture_get</ref>, METH_VARARGS,
	 &quot;get the configuration parameter specified of a ximea device&quot;},
	 {&quot;isOpened&quot;, (PyCFunction)<ref refid="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" kindref="member">VideoCapture_isOpened</ref>, METH_NOARGS,
	 &quot;return true if the ximea device is opened, false otherwise.&quot;},
	 {&quot;release&quot;, (PyCFunction)<ref refid="group__videocapture_1ga1e1031f88074e6da641300fbfd3443b2" kindref="member">VideoCapture_release</ref>, METH_NOARGS,
	 &quot;release the ximea device.&quot;},
         {&quot;startAcq&quot;, (PyCFunction)<ref refid="group__videocapture_1ga3b3854c25d949c83d3abaf6d29234773" kindref="member">VideoCapture_startAcquisition</ref>, METH_NOARGS,
	 &quot;Start the acquisition of a camera device&quot;},
         {&quot;stopAcq&quot;, (PyCFunction)<ref refid="group__videocapture_1gadc5ffb2ba6fdf814ae327008b7e86259" kindref="member">VideoCapture_stopAcquisition</ref>, METH_NOARGS,
	 &quot;Stop the acquisition of a camera device.&quot;},
	 {&quot;serialWrite&quot;, (PyCFunction)<ref refid="group__videocapture_1ga8b4f160e2dd63025756c76b5cd55de0b" kindref="member">VideoCapture_serialSet</ref>, METH_VARARGS,
	 &quot;Write data to the serial port of a camera device.&quot;},
	 
	 
    {NULL}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="568" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__videocapture_1gaa2a165a72d4dbe4fa7d77164193a8bc4" prot="public" static="yes" mutable="no">
        <type>PyTypeObject</type>
        <definition>PyTypeObject VideoCaptureType</definition>
        <argsstring></argsstring>
        <name>VideoCaptureType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="590" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__videocapture_1gafcd2b5e08091d3973eb552badcfec160" prot="public" static="yes" mutable="no">
        <type>PyMethodDef</type>
        <definition>PyMethodDef module_methods[]</definition>
        <argsstring>[]</argsstring>
        <name>module_methods</name>
        <initializer>= {
    {NULL}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="632" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="632" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__videocapture_1ga3c3565b6ebb457695ebbd5735b72951c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_open</definition>
        <argsstring>(int device, const char *file)</argsstring>
        <name>VideoCapture_open</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>method to open a camera device through the cameraLink interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of the device to be openned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a call to <ref refid="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" kindref="member">VideoCapture_isOpened()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="43" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga3b3854c25d949c83d3abaf6d29234773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_startAcquisition</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_startAcquisition</name>
        <briefdescription>
<para>Start the acquisition of a camera device. The acquisition is started automaticaly after a call to the constructor of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class. If you want to change some parameters of the acquisition, you have to call stopAcq() first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="80" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1gadc5ffb2ba6fdf814ae327008b7e86259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_stopAcquisition</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_stopAcquisition</name>
        <briefdescription>
<para>Stop the acquisition of a camera device. The acquisition is started automaticaly after a call to the constructor of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class. If you want to change some parameters of the acquisition, you have to call stopAcq() first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="95" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_isOpened</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_isOpened</name>
        <briefdescription>
<para>It check if te camera is running or it has been stopped. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>Py_True if the camera is openned.</para></listitem><listitem><para>Py_False if the camera is closed. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="111" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga1e1031f88074e6da641300fbfd3443b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_release</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_release</name>
        <briefdescription>
<para>Close the camera device: stop the acquisition and free the allocated memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="125" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga8b4f160e2dd63025756c76b5cd55de0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_serialSet</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_serialSet</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Setting the value of a parameter from the serial interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>will be written to the serial port. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="137" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="137" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga0c09d99edd7283a79650234d342baae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool VideoCapture_grab</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_grab</name>
        <briefdescription>
<para>Stop the acquisition and free the allocated memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the frame grabber has successfully grabbed a frame. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="155" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga01d0cc219778d02ad95b1bd6d905d4c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_retrieve</definition>
        <argsstring>(VideoCapture *self)</argsstring>
        <name>VideoCapture_retrieve</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Method to retrieve a frame to Python understanding format. It get the pointer to previously grabbed frame, and convert it to a numpy array object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>myDict, which contains the frame&apos;s data and the meta data of the grabbed frame.</para></listitem><listitem><para>Py_None if the current format has not been retrived. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="168" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="168" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga3f01e3c0d5b206db9aa998dd43b7d50f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_getMeta</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_getMeta</name>
        <briefdescription>
<para>Method to get meta data of the grabbed frame. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>myDict, which contains the meta data of the grabbed frame:<orderedlist>
<listitem><para>the width of the grabbed frame</para></listitem><listitem><para>the height of the grabbed frame </para></listitem></orderedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="259" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="259" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga8d6345ea87da8d740282da893242e25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_fgread</definition>
        <argsstring>(VideoCapture *self)</argsstring>
        <name>VideoCapture_fgread</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Method to get the dictionnary containing the meta data, the frame data and the status of the grabbed frame. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A PyTuple containing the status of the grabbing as first position:<itemizedlist>
<listitem><para>Py_False if the grabbing has failled</para></listitem><listitem><para>Py_True if the grabbing has succeded and the disctionnary containing the data and meta data of the grabbed frame, or Py_None if the grabbing has failled. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="295" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="295" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga9ffd6bd67eb9921066ca6290ceab7eaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_set</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_set</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Setting the value of a parameter from a frame grabber. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>As argument, a identification number is needed. If the identification number is unknown, the parameter name has to be given. It can be one of the following:<itemizedlist>
<listitem><para>FG_TIMEOUT: Time in seconds until device driver displays a timeout of the frame grabber.</para></listitem><listitem><para>FG_WIDTH: Width of the clipping image.</para></listitem><listitem><para>FG_HEIGHT: Height of the clipping image.</para></listitem><listitem><para>FG_XSHIFT: Number of invalid words at the beginning of a row (modulo of the width of the interface).</para></listitem><listitem><para>FG_XOFFSET: X-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_YOFFSET: Y-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_FRAMESPERSEC: Number of images per second.</para></listitem><listitem><para>FG_EXPOSURE: Exposure time in µs.</para></listitem><listitem><para>FG_FORMAT: Color format of the transferred image<orderedlist>
<listitem><para>8bit gray (FG_GRAY)</para></listitem><listitem><para>16bit color (FG_GRAY16)</para></listitem><listitem><para>24bit color (FG_COL24). See color management of the according frame grabber design.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_PORT: Logical number of the active CameraLink port.</para></listitem><listitem><para>FG_TRIGGERMODE: Trigger modes:<orderedlist>
<listitem><para>FREE_RUN</para></listitem><listitem><para>GRABBER_CONTROLLED</para></listitem><listitem><para>GRABBER_CONTROLLED_SYNCRON</para></listitem><listitem><para>ASYNC_SOFTWARE_TRIGGER</para></listitem><listitem><para>ASYNC_TRIGGER.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_STROBPULSEDELAY: Strobe delay to the trigger in µs.</para></listitem><listitem><para>FG_GLOBAL_ACCESS: Returns the value for the set plausibility access.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to required value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_True if the parameter was read correctly Py_False if an invalid parameter has been entered or if the entered value is besides valid ranges. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="344" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1gae26ee5dffe8b0bd008f5f8900415acdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* VideoCapture_get</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_get</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Reading the current value of a parameter from a frame grabber. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>As argument, a identification number is needed. If the identification number is unknown, the parameter name has to be given. It can be one of the following:<itemizedlist>
<listitem><para>FG_CAMSTAUS: If a camera signal is on CameraLink port value is 1 else 0.</para></listitem><listitem><para>FG_REVNR: Current revision version of camera DLL.</para></listitem><listitem><para>FG_TIMEOUT: Time in seconds until device driver displays a timeout of the frame grabber.</para></listitem><listitem><para>FG_WIDTH: Width of the clipping image.</para></listitem><listitem><para>FG_MAXWIDTH: Maximum width of the clipping image.</para></listitem><listitem><para>FG_HEIGHT: Height of the clipping image.</para></listitem><listitem><para>FG_MAXHEIGHT: Maximum height of the clipping image.</para></listitem><listitem><para>FG_XSHIFT: Number of invalid words at the beginning of a row (modulo of the width of the interface).</para></listitem><listitem><para>FG_XOFFSET: X-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_YOFFSET: Y-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_FRAMESPERSEC: Number of images per second.</para></listitem><listitem><para>FG_EXPOSURE: Exposure time in µs.</para></listitem><listitem><para>FG_FORMAT: Color format of the transferred image<orderedlist>
<listitem><para>8bit gray (FG_GRAY)</para></listitem><listitem><para>16bit color (FG_GRAY16)</para></listitem><listitem><para>24bit color (FG_COL24). See color management of the according frame grabber design.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_PORT: Logical number of the active CameraLink port.</para></listitem><listitem><para>FG_PIXELDEPTH: Returns the depth of color of the pixel.</para></listitem><listitem><para>FG_LINEALIGNMENT: Returns the alignment of a line (in bits).</para></listitem><listitem><para>FG_TRANSFER_LEN: Returns the length of the last DMA transfer.</para></listitem><listitem><para>FG_TRIGGERMODE: Trigger modes:<orderedlist>
<listitem><para>FREE_RUN</para></listitem><listitem><para>GRABBER_CONTROLLED</para></listitem><listitem><para>GRABBER_CONTROLLED_SYNCRON</para></listitem><listitem><para>ASYNC_SOFTWARE_TRIGGER</para></listitem><listitem><para>ASYNC_TRIGGER.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_STROBPULSEDELAY: Strobe delay to the trigger in µs.</para></listitem><listitem><para>FG_TWOCAMMODEL: Returns the value, if the loaded camera applet is a dual (1) or a single applet (0).</para></listitem><listitem><para>FG_HDSYNC: Returns the HDSYNC value.</para></listitem><listitem><para>FG_GLOBAL_ACCESS: Returns the value for the set plausibility access.</para></listitem><listitem><para>FG_BOARD_INFORMATION: Information on the board type:<orderedlist>
<listitem><para>BINFO_BOARD_TYPE:<itemizedlist>
<listitem><para>0xa40 for microEnable IV-Base x1</para></listitem><listitem><para>0xa41 for microEnable IV-Full x1</para></listitem><listitem><para>0xa44 for microEnable IV-Full x4</para></listitem></itemizedlist>
</para></listitem><listitem><para>BINFO_POCL:<itemizedlist>
<listitem><para>0 for microEnable IV-Base x1</para></listitem><listitem><para>1 for microEnable IV-Base x1 PoCL </para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>Py_True if the parameter was read correctly</para></listitem><listitem><para>Py_False if an invalid parameter has been entered. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="405" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="405" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga48861707a9306ad742ce71d49431ad46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void VideoCapture_dealloc</definition>
        <argsstring>(VideoCapture *self)</argsstring>
        <name>VideoCapture_dealloc</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>The destructor of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class It release the camera device, and free all the allocated memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="418" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="418" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga1a96426fdf333651aab9656ae32ee2b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject * VideoCapture_new</definition>
        <argsstring>(PyTypeObject *type, PyObject *args, PyObject *kwds)</argsstring>
        <name>VideoCapture_new</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>kwds</declname>
        </param>
        <briefdescription>
<para>The constructor of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class It create the self parameter to be use later in Python. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>self parameter, which represent an instance of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="431" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="431" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga0f80f3755e194457496f745dd527e684" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int VideoCapture_init</definition>
        <argsstring>(VideoCapture *self, PyObject *args, PyObject *kwds)</argsstring>
        <name>VideoCapture_init</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>kwds</declname>
        </param>
        <briefdescription>
<para>This method is called after the constructor, it initialize the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> instance It opens the camera device and create a <ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref> instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if the parsed argument are valable, -1 if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="450" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="450" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1ga53a62040db1d78a3758d9d8e9ec33289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_map_to_export</definition>
        <argsstring>()</argsstring>
        <name>set_map_to_export</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="481" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="481" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="group__videocapture_1gadc29d363d02611463496f131a0b926ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyMODINIT_FUNC</type>
        <definition>PyMODINIT_FUNC initclModule</definition>
        <argsstring>(void)</argsstring>
        <name>initclModule</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function will create the clModule and export the references to the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class and other exported variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" line="642" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="642" bodyend="675"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CameraLink class to be interfaced with Python. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Robin Siemiatkowski </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>29/02/2016 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="21"><highlight class="preprocessor">#include<sp/>&quot;CameraLink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;export.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numpy/ndarrayobject.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;datetime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;structmember.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref>*<sp/>capt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">PyObject<sp/>*myDict<sp/>=<sp/>PyDict_New();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">PyObject<sp/>*rslt<sp/>=<sp/>PyTuple_New(2);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*array_buffer;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga3c3565b6ebb457695ebbd5735b72951c" kindref="member">VideoCapture_open</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" kindref="member">VideoCapture_isOpened</ref>()<sp/>==<sp/>Py_True)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__videocapture_1ga1e1031f88074e6da641300fbfd3443b2" kindref="member">VideoCapture_release</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>capt-&gt;<ref refid="group__capturecam_1ga16b6491e0fe8caae23d169dacc87589e" kindref="member">open</ref>(device,<sp/>file);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" kindref="member">VideoCapture_isOpened</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>\fn<sp/>PyObject*<sp/>VideoCapture_addTrigger(VideoCapture<sp/>*self,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>\brief<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>to<sp/>open<sp/>a<sp/>camera<sp/>device<sp/>through<sp/>the<sp/>cameraLink<sp/>interface.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>\param<sp/>device<sp/>The<sp/>number<sp/>of<sp/>the<sp/>device<sp/>to<sp/>be<sp/>openned.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>\return<sp/>a<sp/>call<sp/>to<sp/>VideoCapture_isOpened()</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="60"><highlight class="comment">PyObject*</highlight></codeline>
<codeline lineno="61"><highlight class="comment">VideoCapture_addTrigger(VideoCapture<sp/>*self,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="62"><highlight class="comment">{</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>timeout;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>triggered;</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!PyArg_ParseTuple(args,<sp/>&quot;ib&quot;,<sp/>&amp;timeout,<sp/>&amp;triggered))</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>capt-&gt;addTrigger(timeout,<sp/>triggered);</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>Py_None;</highlight></codeline>
<codeline lineno="69"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga3b3854c25d949c83d3abaf6d29234773" kindref="member">VideoCapture_startAcquisition</ref>()</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!capt-&gt;<ref refid="group__capturecam_1ga41cc34667ccf43936c6e2fa2fa0df9f0" kindref="member">startAcquire</ref>())</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_True;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_False;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1gadc5ffb2ba6fdf814ae327008b7e86259" kindref="member">VideoCapture_stopAcquisition</ref>()</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!capt-&gt;<ref refid="group__capturecam_1ga3c0090ca5fa9fa481f1945cfd56b79b3" kindref="member">stop</ref>())</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_True;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_False;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" kindref="member">VideoCapture_isOpened</ref>()</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(capt-&gt;<ref refid="classCaptureCAM__CL_1ab33aa6f1a3c040f04500bad5cb06f7df" kindref="member">isopened</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_True;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_False;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga1e1031f88074e6da641300fbfd3443b2" kindref="member">VideoCapture_release</ref>()</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>capt-&gt;<ref refid="group__capturecam_1ga0de12aa713d189d122e945956ce18927" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga8b4f160e2dd63025756c76b5cd55de0b" kindref="member">VideoCapture_serialSet</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer<sp/>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/>&amp;buffer))</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>capt-&gt;serialWrite(buffer);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__videocapture_1ga0c09d99edd7283a79650234d342baae0" kindref="member">VideoCapture_grab</ref>()</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capt-&gt;<ref refid="group__capturecam_1ga0e323148cfd234d43a32918386d021d1" kindref="member">grabFrame</ref>();</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga01d0cc219778d02ad95b1bd6d905d4c7" kindref="member">VideoCapture_retrieve</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(array_buffer==NULL){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(array_buffer);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_buffer=NULL;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(capt-&gt;<ref refid="classCaptureCAM__CL_1a266e2b3ba3adccc6df770467550949ee" kindref="member">format</ref>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FG_BINARY:<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FG_BINARY&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_intp<sp/>nd[2]<sp/>=<sp/>{capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;myarray);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray<sp/>=<sp/>PyArray_SimpleNew(ndim,<sp/>nd,<sp/>NPY_UINT8);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(nd);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)PyArray_DATA((PyArrayObject<sp/>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(array_buffer,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" kindref="member">ImgPtr</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>*capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FG_GRAY:{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_intp<sp/>nd[2]<sp/>=<sp/>{capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>};</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;myarray);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray<sp/>=<sp/>PyArray_SimpleNewFromData(ndim,<sp/>nd,<sp/>NPY_UINT8,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" kindref="member">ImgPtr</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(nd);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FG_GRAY16:<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FG_GRAY16&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_intp<sp/>nd[2]<sp/>=<sp/>{capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>,capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;myarray);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray<sp/>=<sp/>PyArray_SimpleNewFromData(ndim,<sp/>nd,<sp/>NPY_UINT16,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" kindref="member">ImgPtr</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(nd);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FG_COL24:<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FG_COL24&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_intp<sp/>nd[1]<sp/>=<sp/>{capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>*capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>*3};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;myarray);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray<sp/>=<sp/>PyArray_SimpleNew(ndim,<sp/>nd,<sp/>NPY_UINT16);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(nd);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)PyArray_DATA((PyArrayObject<sp/>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(array_buffer,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" kindref="member">ImgPtr</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>*capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>*3);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FG_COL30:<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_intp<sp/>nd[3]<sp/>=<sp/>{capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>,<sp/>4};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;myarray);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray<sp/>=<sp/>PyArray_SimpleNew(ndim,<sp/>nd,<sp/>NPY_UINT8);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(nd);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)PyArray_DATA((PyArrayObject<sp/>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(array_buffer,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" kindref="member">ImgPtr</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>*capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>*4);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FG_COL32<sp/><sp/>:<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_intp<sp/>nd[3]<sp/>=<sp/>{capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>,<sp/>3};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;myarray);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray<sp/>=<sp/>PyArray_SimpleNew(ndim,<sp/>nd,<sp/>NPY_UINT8);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(nd);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)PyArray_DATA((PyArrayObject<sp/>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(array_buffer,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" kindref="member">ImgPtr</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>*capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>*3);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FG_COL48:<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_intp<sp/>nd[2]<sp/>=<sp/>{capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;myarray);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray<sp/>=<sp/>PyArray_SimpleNew(ndim,<sp/>nd,<sp/>NPY_UINT8);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(nd);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)PyArray_DATA((PyArrayObject<sp/>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;myarray);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(array_buffer,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" kindref="member">ImgPtr</ref>,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>*capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>:<sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//capt-&gt;<sp/>resetCvImage();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myDict<sp/>=<sp/>PyDict_New();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myDict<sp/>=<sp/><ref refid="group__videocapture_1ga3f01e3c0d5b206db9aa998dd43b7d50f" kindref="member">VideoCapture_getMeta</ref>();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyDict_SetItemString(myDict,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>self-&gt;myarray);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myDict;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga3f01e3c0d5b206db9aa998dd43b7d50f" kindref="member">VideoCapture_getMeta</ref>()</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyDateTime_IMPORT;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>PyDict_SetItemString(myDict,<sp/></highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">,<sp/>Py_BuildValue(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,<sp/>capt-&gt;<ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>PyDict_SetItemString(myDict,<sp/></highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">,<sp/>Py_BuildValue(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,capt-&gt;<ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyDict_SetItemString(myDict,<sp/>&quot;nframe&quot;,<sp/>Py_BuildValue(&quot;I&quot;,capt-&gt;image.nframe));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyDict_SetItemString(myDict,<sp/>&quot;AbsoluteOffsetX&quot;,<sp/>Py_BuildValue(&quot;I&quot;,capt-&gt;image.AbsoluteOffsetX));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyDict_SetItemString(myDict,<sp/>&quot;AbsoluteOffsetY&quot;,<sp/>Py_BuildValue(&quot;I&quot;,capt-&gt;image.AbsoluteOffsetY));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyObject<sp/>*floatObj<sp/>=<sp/>PyFloat_FromDouble(capt-&gt;image.tsSec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyObject<sp/>*timeTuple<sp/>=<sp/>Py_BuildValue(&quot;(O)&quot;,<sp/>floatObj);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyObject<sp/>*dateTime<sp/>=<sp/>PyDateTime_FromTimestamp(timeTuple);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyDict_SetItemString(myDict,<sp/>&quot;tsSec&quot;,<sp/>dateTime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_CLEAR(floatObj);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_CLEAR(timeTuple);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_CLEAR(dateTime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyObject<sp/>*floatObj1<sp/>=<sp/>PyFloat_FromDouble(capt-&gt;image.tsUSec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyObject<sp/>*timeTuple1<sp/>=<sp/>Py_BuildValue(&quot;(O)&quot;,<sp/>floatObj1);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyObject<sp/>*dateTime1<sp/>=<sp/>PyDateTime_FromTimestamp(timeTuple1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PyDict_SetItemString(myDict,<sp/>&quot;tsUSec&quot;,<sp/>dateTime1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Py_CLEAR(floatObj1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Py_CLEAR(timeTuple1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Py_CLEAR(dateTime1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myDict;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga8d6345ea87da8d740282da893242e25f" kindref="member">VideoCapture_fgread</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>rslt<sp/>=<sp/>PyTuple_New(2);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__videocapture_1ga0c09d99edd7283a79650234d342baae0" kindref="member">VideoCapture_grab</ref>()){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(rslt,<sp/>0,<sp/>Py_False);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(rslt,<sp/>1,<sp/>Py_None);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(rslt,<sp/>0,<sp/>Py_True);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(rslt,<sp/>1,<sp/><ref refid="group__videocapture_1ga01d0cc219778d02ad95b1bd6d905d4c7" kindref="member">VideoCapture_retrieve</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//PyTuple_SetItem(rslt,<sp/>1,<sp/>Py_BuildValue(&quot;O&amp;&quot;,<sp/>capt-&gt;ImgPtr));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rslt;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1ga9ffd6bd67eb9921066ca6290ceab7eaf" kindref="member">VideoCapture_set</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>propId;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">,<sp/>&amp;propId,<sp/>&amp;value))</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(capt-&gt;<ref refid="group__capturecam_1gaabeb52911d3a8c016bffd9ac1602c985" kindref="member">setProperty</ref>(propId,<sp/>value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_True;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_False;</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">PyObject*<sp/><ref refid="group__videocapture_1gae26ee5dffe8b0bd008f5f8900415acdc" kindref="member">VideoCapture_get</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>propId;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>&amp;propId))</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_BuildValue(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>capt-&gt;<ref refid="group__capturecam_1gaaeae6486152d120aba8122ac7957045f" kindref="member">getProperty</ref>(propId));</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VideoCapture_dealloc(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;myarray);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__videocapture_1ga1e1031f88074e6da641300fbfd3443b2" kindref="member">VideoCapture_release</ref>();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;ob_type-&gt;tp_free((PyObject*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*<sp/>VideoCapture_new(PyTypeObject<sp/>*type,<sp/>PyObject<sp/>*args,<sp/>PyObject<sp/>*kwds)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*)type-&gt;tp_alloc(type,<sp/>0);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;is:call&quot;</highlight><highlight class="normal">,<sp/>&amp;self-&gt;device,<sp/>&amp;self-&gt;file))<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyObject<sp/>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VideoCapture_init(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args,<sp/>PyObject<sp/>*kwds)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kwlist[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;device&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">,<sp/><sp/>NULL};</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>PyArg_ParseTupleAndKeywords(args,<sp/>kwds,<sp/></highlight><highlight class="stringliteral">&quot;|is&quot;</highlight><highlight class="normal">,<sp/>kwlist,<sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;self-&gt;device,<sp/>&amp;self-&gt;file))</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>capt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref>();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__videocapture_1ga3c3565b6ebb457695ebbd5735b72951c" kindref="member">VideoCapture_open</ref>(self-&gt;device,<sp/>self-&gt;file);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="463"><highlight class="comment">PyObject*<sp/>VideoCapture_Display(VideoCapture<sp/>*self,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="464"><highlight class="comment">{</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>open;</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!PyArg_ParseTuple(args,<sp/>&quot;i&quot;,<sp/>&amp;open)){</highlight></codeline>
<codeline lineno="467"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;can&apos;t<sp/>read<sp/>argument&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capt-&gt;display(open);</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>Py_None;</highlight></codeline>
<codeline lineno="473"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMemberDef<sp/>VideoCapture_members[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL}<sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal">};</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_map_to_export(){</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_OK&quot;</highlight><highlight class="normal">,<sp/>FG_OK));</highlight><highlight class="comment">//<sp/>The<sp/>parameter<sp/>was<sp/>set<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_NOT_INIT<sp/>&quot;</highlight><highlight class="normal">,<sp/><sp/>FG_NOT_INIT));</highlight><highlight class="comment">//<sp/>Initialization<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_INVALID_PARAMETER&quot;</highlight><highlight class="normal">,<sp/>FG_INVALID_PARAMETER));</highlight><highlight class="comment">//<sp/>An<sp/>invalid<sp/>parameter<sp/>has<sp/>been<sp/>entered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_VALUE_OUT_OF_RANGE&quot;</highlight><highlight class="normal"><sp/>,<sp/>FG_VALUE_OUT_OF_RANGE));</highlight><highlight class="comment">//<sp/>Value<sp/>is<sp/>besides<sp/>valid<sp/>ranges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_CAMSTATUS&quot;</highlight><highlight class="normal">,<sp/>FG_CAMSTATUS));</highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>camera<sp/>signal<sp/>is<sp/>on<sp/>CameraLink<sp/>port<sp/>value<sp/>is<sp/>1<sp/>else<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_REVNR<sp/>&quot;</highlight><highlight class="normal">,<sp/>FG_REVNR));</highlight><highlight class="comment">//<sp/>Current<sp/>revision<sp/>version<sp/>of<sp/>camera<sp/>DLL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_TIMEOUT&quot;</highlight><highlight class="normal">,<sp/>FG_TIMEOUT));</highlight><highlight class="comment">//<sp/>Time<sp/>in<sp/>seconds<sp/>until<sp/>device<sp/>driver<sp/>displays<sp/>a<sp/>timeout<sp/>of<sp/>the<sp/>frame<sp/>grabber.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_WIDTH&quot;</highlight><highlight class="normal">,<sp/>FG_WIDTH));</highlight><highlight class="comment">//<sp/><sp/>Width<sp/>of<sp/>the<sp/>clipping<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_MAXWIDTH&quot;</highlight><highlight class="normal">,<sp/>FG_MAXWIDTH));</highlight><highlight class="comment">//<sp/>Maximum<sp/>width<sp/>of<sp/>the<sp/>clipping<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_HEIGHT&quot;</highlight><highlight class="normal">,<sp/>FG_HEIGHT));</highlight><highlight class="comment">//<sp/>Height<sp/>of<sp/>the<sp/>clipping<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_MAXHEIGHT&quot;</highlight><highlight class="normal">,<sp/>FG_MAXHEIGHT));</highlight><highlight class="comment">//<sp/>Maximum<sp/>height<sp/>of<sp/>the<sp/>clipping<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_XSHIFT&quot;</highlight><highlight class="normal">,<sp/>FG_XSHIFT));</highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>invalid<sp/>words<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>row<sp/>(modulo<sp/>of<sp/>the<sp/>width<sp/>of<sp/>the<sp/>interface).<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_XOFFSET&quot;</highlight><highlight class="normal">,<sp/>FG_XOFFSET));</highlight><highlight class="comment">//<sp/>X-offset<sp/>from<sp/>the<sp/>left<sp/>top<sp/>corner<sp/>in<sp/>pixel.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_YOFFSET&quot;</highlight><highlight class="normal">,<sp/>FG_YOFFSET));</highlight><highlight class="comment">//<sp/>Y-offset<sp/>from<sp/>the<sp/>left<sp/>top<sp/>corner<sp/>in<sp/>pixel.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_FRAMESPERSEC&quot;</highlight><highlight class="normal">,<sp/>FG_FRAMESPERSEC));</highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>images<sp/>per<sp/>second.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_MAXFRAMESPERSEC&quot;</highlight><highlight class="normal">,<sp/>FG_MAXFRAMESPERSEC));</highlight><highlight class="comment">//<sp/>Max<sp/>number<sp/>of<sp/>images<sp/>per<sp/>second.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_EXPOSURE&quot;</highlight><highlight class="normal">,<sp/>FG_EXPOSURE));</highlight><highlight class="comment">//<sp/>Exposure<sp/>time<sp/>in<sp/>µs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Color<sp/>format<sp/>of<sp/>the<sp/>transferred<sp/>image:<sp/></highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>1bit<sp/>(FG_BINARY),</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>8bit<sp/>(FG_GRAY),</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>16bit<sp/>(FG_GRAY16),</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>24bit<sp/>(FG_COL24),</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>30bit<sp/>(FG_COL30),</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>32bit<sp/>(FG_COL32),</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>48bit<sp/>(FG_COL48).</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>See<sp/>color<sp/>management<sp/>of<sp/>the<sp/>according<sp/>frame<sp/>grabber<sp/>design.<sp/><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_FORMAT&quot;</highlight><highlight class="normal">,<sp/>FG_FORMAT));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_BINARY&quot;</highlight><highlight class="normal">,<sp/>FG_BINARY));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_GRAY&quot;</highlight><highlight class="normal">,<sp/>FG_GRAY));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_GRAY16<sp/>&quot;</highlight><highlight class="normal">,<sp/>FG_GRAY16));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_COL24&quot;</highlight><highlight class="normal">,<sp/>FG_COL24));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_COL30&quot;</highlight><highlight class="normal">,<sp/>FG_COL30));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_COL32&quot;</highlight><highlight class="normal">,<sp/>FG_COL32));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_COL48<sp/>&quot;</highlight><highlight class="normal">,<sp/>FG_COL48));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;PORT_A&quot;</highlight><highlight class="normal">,<sp/>PORT_A));<sp/></highlight><highlight class="comment">//<sp/>base<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;PORT_B&quot;</highlight><highlight class="normal">,<sp/>PORT_B));<sp/></highlight><highlight class="comment">//<sp/>base<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_COL48<sp/>&quot;</highlight><highlight class="normal">,<sp/>PORT_AB));<sp/></highlight><highlight class="comment">//<sp/>medium/full<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_PORT&quot;</highlight><highlight class="normal">,<sp/>FG_PORT));</highlight><highlight class="comment">//Logical<sp/>number<sp/>of<sp/>the<sp/>active<sp/>CameraLink<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_PIXELDEPTH&quot;</highlight><highlight class="normal">,<sp/>FG_PIXELDEPTH));</highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>depth<sp/>of<sp/>color<sp/>of<sp/>the<sp/>pixel.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_LINEALIGNMENT<sp/>&quot;</highlight><highlight class="normal">,<sp/>FG_LINEALIGNMENT));</highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>alignment<sp/>of<sp/>a<sp/>line<sp/>(in<sp/>bits).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_RIGHT_ALIGNED&quot;</highlight><highlight class="normal">,<sp/>FG_RIGHT_ALIGNED));<sp/></highlight><highlight class="comment">//<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_LEFT_ALIGNED<sp/>&quot;</highlight><highlight class="normal">,<sp/>FG_LEFT_ALIGNED));<sp/></highlight><highlight class="comment">//<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_TRANSFER_LEN&quot;</highlight><highlight class="normal">,<sp/>FG_TRANSFER_LEN));</highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>length<sp/>of<sp/>the<sp/>last<sp/>DMA<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Trigger<sp/>modes:<sp/></highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>FREE_RUN</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>GRABBER_CONTROLLED</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>GRABBER_CONTROLLED_SYNCRON</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>ASYNC_SOFTWARE_TRIGGER</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>ASYNC_TRIGGER<sp/></highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_TRIGGERMODE&quot;</highlight><highlight class="normal">,<sp/>FG_TRIGGERMODE));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FREE_RUN&quot;</highlight><highlight class="normal">,<sp/>FREE_RUN));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;GRABBER_CONTROLLED&quot;</highlight><highlight class="normal">,<sp/><sp/>GRABBER_CONTROLLED));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>my_map.insert(make_pair(&quot;GRABBER_CONTROLLED_SYNCRON&quot;,<sp/>GRABBER_CONTROLLED_SYNCRON));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;ASYNC_SOFTWARE_TRIGGER&quot;</highlight><highlight class="normal"><sp/>,<sp/>ASYNC_SOFTWARE_TRIGGER));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;ASYNC_TRIGGER&quot;</highlight><highlight class="normal"><sp/>,<sp/>ASYNC_TRIGGER));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>my_map.insert(make_pair(&quot;FG_STROBPULSEDELAY&quot;,<sp/>FG_STROBPULSEDELAY));//<sp/>Strobe<sp/>delay<sp/>to<sp/>the<sp/>trigger<sp/>in<sp/>µs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_TWOCAMMODEL&quot;</highlight><highlight class="normal">,<sp/>FG_TWOCAMMODEL));</highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value,<sp/>if<sp/>the<sp/>loaded<sp/>camera<sp/>applet<sp/>is<sp/>a<sp/>dual<sp/>(1)<sp/>or<sp/>a<sp/>single<sp/>applet<sp/>(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_HDSYNC&quot;</highlight><highlight class="normal">,<sp/>FG_HDSYNC));</highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>HDSYNC<sp/>value.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_GLOBAL_ACCESS&quot;</highlight><highlight class="normal">,<sp/>FG_GLOBAL_ACCESS));</highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>for<sp/>the<sp/>set<sp/>plausibility<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Information<sp/>on<sp/>the<sp/>board<sp/>type:<sp/></highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>BINFO_BOARD_TYPE:</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xa40<sp/>for<sp/>microEnable<sp/>IV-Base<sp/>x1</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xa41<sp/>for<sp/>microEnable<sp/>IV-Full<sp/>x1</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xa44<sp/>for<sp/>microEnable<sp/>IV-Full<sp/>x4</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>BINFO_POCL:</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>for<sp/>microEnable<sp/>IV-Base<sp/>x1</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>for<sp/>microEnable<sp/>IV-Base<sp/>x1<sp/>PoCL<sp/></highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>my_map.insert(make_pair(</highlight><highlight class="stringliteral">&quot;FG_BOARD_INFORMATION&quot;</highlight><highlight class="normal">,<sp/>FG_BOARD_INFORMATION));</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>VideoCapture_methods[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<ref refid="group__videocapture_1ga8d6345ea87da8d740282da893242e25f" kindref="member">VideoCapture_fgread</ref>,<sp/>METH_NOARGS,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;read<sp/>a<sp/>frame<sp/>from<sp/>ximea<sp/>device,<sp/>return<sp/>a<sp/>tuple<sp/>containing<sp/>a<sp/>bool<sp/>(true=<sp/>success,<sp/>false=<sp/>fail)<sp/>and<sp/>a<sp/>dictionnary<sp/>with<sp/>a<sp/>ndarray<sp/>and<sp/>meta<sp/>data.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<ref refid="group__videocapture_1ga9ffd6bd67eb9921066ca6290ceab7eaf" kindref="member">VideoCapture_set</ref>,<sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;set<sp/>the<sp/>configuration<sp/>parameter<sp/>specified<sp/>of<sp/>a<sp/>ximea<sp/>device&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<ref refid="group__videocapture_1gae26ee5dffe8b0bd008f5f8900415acdc" kindref="member">VideoCapture_get</ref>,<sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>configuration<sp/>parameter<sp/>specified<sp/>of<sp/>a<sp/>ximea<sp/>device&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;isOpened&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<ref refid="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" kindref="member">VideoCapture_isOpened</ref>,<sp/>METH_NOARGS,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;return<sp/>true<sp/>if<sp/>the<sp/>ximea<sp/>device<sp/>is<sp/>opened,<sp/>false<sp/>otherwise.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;release&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<ref refid="group__videocapture_1ga1e1031f88074e6da641300fbfd3443b2" kindref="member">VideoCapture_release</ref>,<sp/>METH_NOARGS,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;release<sp/>the<sp/>ximea<sp/>device.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;startAcq&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<ref refid="group__videocapture_1ga3b3854c25d949c83d3abaf6d29234773" kindref="member">VideoCapture_startAcquisition</ref>,<sp/>METH_NOARGS,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>the<sp/>acquisition<sp/>of<sp/>a<sp/>camera<sp/>device&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;stopAcq&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<ref refid="group__videocapture_1gadc5ffb2ba6fdf814ae327008b7e86259" kindref="member">VideoCapture_stopAcquisition</ref>,<sp/>METH_NOARGS,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Stop<sp/>the<sp/>acquisition<sp/>of<sp/>a<sp/>camera<sp/>device.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;serialWrite&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)<ref refid="group__videocapture_1ga8b4f160e2dd63025756c76b5cd55de0b" kindref="member">VideoCapture_serialSet</ref>,<sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>data<sp/>to<sp/>the<sp/>serial<sp/>port<sp/>of<sp/>a<sp/>camera<sp/>device.&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{&quot;show&quot;,<sp/>(PyCFunction)VideoCapture_Display,<sp/>METH_VARARGS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&quot;display<sp/>image.&quot;},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL}</highlight></codeline>
<codeline lineno="588"><highlight class="normal">};</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>VideoCaptureType<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD_INIT(NULL)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*ob_size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VideoCapture.VideoCapture&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_name*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref>),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_basicsize*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_itemsize*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>(destructor)VideoCapture_dealloc,<sp/></highlight><highlight class="comment">/*tp_dealloc*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_print*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_getattr*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_setattr*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_compare*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_repr*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_as_number*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_as_sequence*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_as_mapping*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_hash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_call*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_str*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_getattro*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_setattro*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tp_as_buffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_TPFLAGS_DEFAULT<sp/>|<sp/>Py_TPFLAGS_BASETYPE,<sp/></highlight><highlight class="comment">/*tp_flags*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VideoCapture<sp/>objects&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_doc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_traverse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_richcompare<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_weaklistoffset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_iter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_iternext<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>VideoCapture_methods,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_methods<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>VideoCapture_members,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_members<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_getset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_base<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_dict<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_descr_get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_descr_set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_dictoffset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>(initproc)VideoCapture_init,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_alloc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>VideoCapture_new,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tp_new<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">};</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>module_methods[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL}</highlight></codeline>
<codeline lineno="634"><highlight class="normal">};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">PyMODINIT_FUNC<sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><ref refid="group__videocapture_1gadc29d363d02611463496f131a0b926ba" kindref="member">initclModule</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>m;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp,<sp/>*d;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>import_array();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyType_Ready(&amp;VideoCaptureType)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>install<sp/>ximea<sp/>module&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>Py_InitModule3(</highlight><highlight class="stringliteral">&quot;clModule&quot;</highlight><highlight class="normal">,<sp/>module_methods,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Python<sp/>module<sp/>to<sp/>control<sp/>devices<sp/>throught<sp/>cameraLink<sp/>interface&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>install<sp/>ximea<sp/>module&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined<sp/>WIN32<sp/>||<sp/>defined<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_map_to_export();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>PyModule_GetDict(m);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;string,<sp/>int&gt;::iterator<sp/>p;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p<sp/>=<sp/>my_map.begin();<sp/>p<sp/>!=<sp/>my_map.end();<sp/>p++)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>Py_BuildValue(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>p-&gt;second);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyDict_SetItemString(d,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p-&gt;first.c_str(),<sp/>tmp);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(tmp);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(&amp;VideoCaptureType);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyModule_AddObject(m,<sp/></highlight><highlight class="stringliteral">&quot;VideoCapture&quot;</highlight><highlight class="normal">,<sp/>(PyObject<sp/>*)&amp;VideoCaptureType);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception<sp/>&amp;<sp/>e<sp/>)<sp/></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what();<sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp"/>
  </compounddef>
</doxygen>
