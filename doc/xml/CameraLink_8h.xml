<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="CameraLink_8h" kind="file" language="C++">
    <compoundname>CameraLink.h</compoundname>
    <includes local="yes">Python.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory.h</includes>
    <includes local="no">string</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">map</includes>
    <includes local="no">fgrab_prototyp.h</includes>
    <includes local="no">SisoDisplay.h</includes>
    <includedby refid="CameraLink_8cpp" local="yes">/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp</includedby>
    <includedby refid="clSerial_8cpp" local="yes">/home/essais/Code/crappy_/crappy/sources/Jai_lib/clSerial.cpp</includedby>
    <includedby refid="Jai__lib_2export_8h" local="yes">/home/essais/Code/crappy_/crappy/sources/Jai_lib/export.h</includedby>
    <includedby refid="pyCameraLink_8cpp" local="yes">/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp</includedby>
    <incdepgraph>
      <node id="572">
        <label>SisoDisplay.h</label>
      </node>
      <node id="568">
        <label>string</label>
      </node>
      <node id="570">
        <label>map</label>
      </node>
      <node id="567">
        <label>memory.h</label>
      </node>
      <node id="569">
        <label>typeinfo</label>
      </node>
      <node id="563">
        <label>Python.h</label>
      </node>
      <node id="564">
        <label>unistd.h</label>
      </node>
      <node id="566">
        <label>iostream</label>
      </node>
      <node id="562">
        <label>/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h</label>
        <link refid="CameraLink_8h"/>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
        <childnode refid="566" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
        <childnode refid="568" relation="include">
        </childnode>
        <childnode refid="569" relation="include">
        </childnode>
        <childnode refid="570" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
        <childnode refid="572" relation="include">
        </childnode>
      </node>
      <node id="571">
        <label>fgrab_prototyp.h</label>
      </node>
      <node id="565">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="575">
        <label>/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp</label>
        <link refid="pyCameraLink_8cpp"/>
      </node>
      <node id="573">
        <label>/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h</label>
        <link refid="CameraLink_8h"/>
        <childnode refid="574" relation="include">
        </childnode>
        <childnode refid="575" relation="include">
        </childnode>
      </node>
      <node id="574">
        <label>/home/essais/Code/crappy_/crappy/sources/Jai_lib/export.h</label>
        <link refid="Jai__lib_2export_8h_source"/>
        <childnode refid="575" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classCaptureCAM__CL" prot="public">CaptureCAM_CL</innerclass>
    <innerclass refid="structVideoCapture" prot="public">VideoCapture</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__capturecam_1gab6e6ee86736f9ebb56e74ae21bf3ff8a" prot="public" static="no">
        <name>NPY_NO_DEPRECATED_API</name>
        <initializer>NPY_1_7_API_VERSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="24" column="17" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__capturecam_1ga808e08638be3cba36e36759e5b150de0" prot="public" static="no">
        <name>DLLEXPORT</name>
        <initializer>extern &quot;C&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="51" column="11" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__capturecam_1gad7f47a30901743cfd2322e26bf9105be" prot="public" static="no">
        <name>CHECK</name>
        <param><defname>param</defname></param>
        <param><defname>paramDescr</defname></param>
        <param><defname>Value</defname></param>
        <initializer>if((Fg_setParameter(fg,param,Value, camPort)&lt;0)){  \
					      sprintf(Data,&quot;Fg_setParameter(%s) failed: %s\n&quot;,paramDescr, Fg_getLastErrorDescription(fg)); \
					      cout &lt;&lt; &quot;ERROR:&quot; &lt;&lt; Data &lt;&lt; endl; \
					      throw string(Data);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="52" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__capturecam_1gade1cd323cec87e552290353d21b56ebc" prot="public" static="no">
        <name>HandleResult</name>
        <param><defname>res</defname></param>
        <param><defname>place</defname></param>
        <initializer>if (res!=FG_OK) {printf(&quot; An error occured: %s (%d)\n&quot;,place,res);close();}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="56" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__capturecam_1ga27dd152656bae1341cc3f4e53a7f7f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_open</definition>
        <argsstring>(int device, const char *file)</argsstring>
        <name>VideoCapture_open</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>method to open a camera device through the cameraLink interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of the device to be openned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a call to <ref refid="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" kindref="member">VideoCapture_isOpened()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="120" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga4a42098fa43557947a08120ac6364b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_isOpened</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_isOpened</name>
        <briefdescription>
<para>It check if te camera is running or it has been stopped. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>Py_True if the camera is openned.</para></listitem><listitem><para>Py_False if the camera is closed. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="121" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gaf93b7c64209bd94d09ef2ae33f4ee605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_release</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_release</name>
        <briefdescription>
<para>Close the camera device: stop the acquisition and free the allocated memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="122" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga0df26da877ca59521ff32a8a61667e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>void VideoCapture_startAcquisition</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_startAcquisition</name>
        <briefdescription>
<para>Start the acquisition of a camera device. The acquisition is started automaticaly after a call to the constructor of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class. If you want to change some parameters of the acquisition, you have to call stopAcq() first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="123" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gae8b9ac61654567b11a6bb33990444369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>void VideoCapture_stopAcquisition</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_stopAcquisition</name>
        <briefdescription>
<para>Stop the acquisition of a camera device. The acquisition is started automaticaly after a call to the constructor of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class. If you want to change some parameters of the acquisition, you have to call stopAcq() first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="124" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga0c09d99edd7283a79650234d342baae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool VideoCapture_grab</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_grab</name>
        <briefdescription>
<para>Stop the acquisition and free the allocated memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the frame grabber has successfully grabbed a frame. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="126" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga45ee1e6264cbc06e258e0695ad1d56c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_retrieve</definition>
        <argsstring>(VideoCapture *self)</argsstring>
        <name>VideoCapture_retrieve</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Method to retrieve a frame to Python understanding format. It get the pointer to previously grabbed frame, and convert it to a numpy array object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>myDict, which contains the frame&apos;s data and the meta data of the grabbed frame.</para></listitem><listitem><para>Py_None if the current format has not been retrived. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="127" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="168" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gab453bd40a3150500e47ece19f58c498f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_fgread</definition>
        <argsstring>(VideoCapture *self)</argsstring>
        <name>VideoCapture_fgread</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Method to get the dictionnary containing the meta data, the frame data and the status of the grabbed frame. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A PyTuple containing the status of the grabbing as first position:<itemizedlist>
<listitem><para>Py_False if the grabbing has failled</para></listitem><listitem><para>Py_True if the grabbing has succeded and the disctionnary containing the data and meta data of the grabbed frame, or Py_None if the grabbing has failled. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="128" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="295" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gad08dea252aab9516c283b80bd5180418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_set</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_set</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Setting the value of a parameter from a frame grabber. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>As argument, a identification number is needed. If the identification number is unknown, the parameter name has to be given. It can be one of the following:<itemizedlist>
<listitem><para>FG_TIMEOUT: Time in seconds until device driver displays a timeout of the frame grabber.</para></listitem><listitem><para>FG_WIDTH: Width of the clipping image.</para></listitem><listitem><para>FG_HEIGHT: Height of the clipping image.</para></listitem><listitem><para>FG_XSHIFT: Number of invalid words at the beginning of a row (modulo of the width of the interface).</para></listitem><listitem><para>FG_XOFFSET: X-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_YOFFSET: Y-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_FRAMESPERSEC: Number of images per second.</para></listitem><listitem><para>FG_EXPOSURE: Exposure time in µs.</para></listitem><listitem><para>FG_FORMAT: Color format of the transferred image<orderedlist>
<listitem><para>8bit gray (FG_GRAY)</para></listitem><listitem><para>16bit color (FG_GRAY16)</para></listitem><listitem><para>24bit color (FG_COL24). See color management of the according frame grabber design.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_PORT: Logical number of the active CameraLink port.</para></listitem><listitem><para>FG_TRIGGERMODE: Trigger modes:<orderedlist>
<listitem><para>FREE_RUN</para></listitem><listitem><para>GRABBER_CONTROLLED</para></listitem><listitem><para>GRABBER_CONTROLLED_SYNCRON</para></listitem><listitem><para>ASYNC_SOFTWARE_TRIGGER</para></listitem><listitem><para>ASYNC_TRIGGER.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_STROBPULSEDELAY: Strobe delay to the trigger in µs.</para></listitem><listitem><para>FG_GLOBAL_ACCESS: Returns the value for the set plausibility access.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to required value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_True if the parameter was read correctly Py_False if an invalid parameter has been entered or if the entered value is besides valid ranges. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="129" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga9f1fb4911cda27db7a62de2ed8aa0a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_get</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_get</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Reading the current value of a parameter from a frame grabber. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>As argument, a identification number is needed. If the identification number is unknown, the parameter name has to be given. It can be one of the following:<itemizedlist>
<listitem><para>FG_CAMSTAUS: If a camera signal is on CameraLink port value is 1 else 0.</para></listitem><listitem><para>FG_REVNR: Current revision version of camera DLL.</para></listitem><listitem><para>FG_TIMEOUT: Time in seconds until device driver displays a timeout of the frame grabber.</para></listitem><listitem><para>FG_WIDTH: Width of the clipping image.</para></listitem><listitem><para>FG_MAXWIDTH: Maximum width of the clipping image.</para></listitem><listitem><para>FG_HEIGHT: Height of the clipping image.</para></listitem><listitem><para>FG_MAXHEIGHT: Maximum height of the clipping image.</para></listitem><listitem><para>FG_XSHIFT: Number of invalid words at the beginning of a row (modulo of the width of the interface).</para></listitem><listitem><para>FG_XOFFSET: X-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_YOFFSET: Y-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_FRAMESPERSEC: Number of images per second.</para></listitem><listitem><para>FG_EXPOSURE: Exposure time in µs.</para></listitem><listitem><para>FG_FORMAT: Color format of the transferred image<orderedlist>
<listitem><para>8bit gray (FG_GRAY)</para></listitem><listitem><para>16bit color (FG_GRAY16)</para></listitem><listitem><para>24bit color (FG_COL24). See color management of the according frame grabber design.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_PORT: Logical number of the active CameraLink port.</para></listitem><listitem><para>FG_PIXELDEPTH: Returns the depth of color of the pixel.</para></listitem><listitem><para>FG_LINEALIGNMENT: Returns the alignment of a line (in bits).</para></listitem><listitem><para>FG_TRANSFER_LEN: Returns the length of the last DMA transfer.</para></listitem><listitem><para>FG_TRIGGERMODE: Trigger modes:<orderedlist>
<listitem><para>FREE_RUN</para></listitem><listitem><para>GRABBER_CONTROLLED</para></listitem><listitem><para>GRABBER_CONTROLLED_SYNCRON</para></listitem><listitem><para>ASYNC_SOFTWARE_TRIGGER</para></listitem><listitem><para>ASYNC_TRIGGER.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_STROBPULSEDELAY: Strobe delay to the trigger in µs.</para></listitem><listitem><para>FG_TWOCAMMODEL: Returns the value, if the loaded camera applet is a dual (1) or a single applet (0).</para></listitem><listitem><para>FG_HDSYNC: Returns the HDSYNC value.</para></listitem><listitem><para>FG_GLOBAL_ACCESS: Returns the value for the set plausibility access.</para></listitem><listitem><para>FG_BOARD_INFORMATION: Information on the board type:<orderedlist>
<listitem><para>BINFO_BOARD_TYPE:<itemizedlist>
<listitem><para>0xa40 for microEnable IV-Base x1</para></listitem><listitem><para>0xa41 for microEnable IV-Full x1</para></listitem><listitem><para>0xa44 for microEnable IV-Full x4</para></listitem></itemizedlist>
</para></listitem><listitem><para>BINFO_POCL:<itemizedlist>
<listitem><para>0 for microEnable IV-Base x1</para></listitem><listitem><para>1 for microEnable IV-Base x1 PoCL </para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>Py_True if the parameter was read correctly</para></listitem><listitem><para>Py_False if an invalid parameter has been entered. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="130" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="405" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga1f885a9d90ee5ef63534859dbd3e00cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_getMeta</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_getMeta</name>
        <briefdescription>
<para>Method to get meta data of the grabbed frame. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>myDict, which contains the meta data of the grabbed frame:<orderedlist>
<listitem><para>the width of the grabbed frame</para></listitem><listitem><para>the height of the grabbed frame </para></listitem></orderedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="131" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="259" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gae8cb1af4302eef084c7c9fed80f3c45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_serialSet</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_serialSet</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Setting the value of a parameter from the serial interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>will be written to the serial port. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="132" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="137" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="preprocessor">#ifndef<sp/>CAMERA_LINK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAMERA_LINK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPY_NO_DEPRECATED_API<sp/>NPY_1_7_API_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Python.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIN32<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sleep(x)<sp/>Sleep(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fgrab_prototyp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SisoDisplay.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DLLEXPORT<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK(param,<sp/>paramDescr,<sp/>Value)<sp/><sp/><sp/>if((Fg_setParameter(fg,param,Value,<sp/>camPort)&lt;0)){<sp/><sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(Data,&quot;Fg_setParameter(%s)<sp/>failed:<sp/>%s\n&quot;,paramDescr,<sp/>Fg_getLastErrorDescription(fg));<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;ERROR:&quot;<sp/>&lt;&lt;<sp/>Data<sp/>&lt;&lt;<sp/>endl;<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>string(Data);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HandleResult(res,place)<sp/>if<sp/>(res!=FG_OK)<sp/>{printf(&quot;<sp/>An<sp/>error<sp/>occured:<sp/>%s<sp/>(%d)\n&quot;,place,res);close();}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classCaptureCAM__CL" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref></highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref>();<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref>();<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>open(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>close();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>grabFrame();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startAcquire();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restart();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getProperty(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setProperty(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetCvImage();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toString();<sp/></highlight></codeline>
<codeline lineno="75" refid="classCaptureCAM__CL_1a266e2b3ba3adccc6df770467550949ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1a266e2b3ba3adccc6df770467550949ee" kindref="member">format</ref>;<sp/></highlight></codeline>
<codeline lineno="76" refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1ab4bfa7d4e0737be410f9a1bb2ee8a331" kindref="member">width</ref>;<sp/></highlight></codeline>
<codeline lineno="77" refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1aa2c3b3b877b2be9060509eb74a746fbb" kindref="member">height</ref>;<sp/></highlight></codeline>
<codeline lineno="78" refid="classCaptureCAM__CL_1a2da5179b4ab5cea7cce3500426ddc5fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1a2da5179b4ab5cea7cce3500426ddc5fa" kindref="member">xoffset</ref>;<sp/></highlight></codeline>
<codeline lineno="79" refid="classCaptureCAM__CL_1a1eb4328834bde84f1837c6033012be0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1a1eb4328834bde84f1837c6033012be0d" kindref="member">yoffset</ref>;<sp/></highlight></codeline>
<codeline lineno="80" refid="classCaptureCAM__CL_1a389bd2abcf59cbbc09356897508eec7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1a389bd2abcf59cbbc09356897508eec7b" kindref="member">boardNr</ref>;<sp/></highlight></codeline>
<codeline lineno="81" refid="classCaptureCAM__CL_1ae7ac89be87ecb4da1ae3ca8dbf391f5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1ae7ac89be87ecb4da1ae3ca8dbf391f5b" kindref="member">timeout</ref>;<sp/></highlight></codeline>
<codeline lineno="82" refid="classCaptureCAM__CL_1a63023c34ba9c4cb2c8ab517b8190f641" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1a63023c34ba9c4cb2c8ab517b8190f641" kindref="member">camPort</ref>;<sp/></highlight></codeline>
<codeline lineno="83" refid="classCaptureCAM__CL_1aac6834248bdede33c42d3ef3e3c7ae26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1aac6834248bdede33c42d3ef3e3c7ae26" kindref="member">framespersec</ref>;<sp/></highlight></codeline>
<codeline lineno="84" refid="classCaptureCAM__CL_1aec279de1b4bf987a509af1b7b8aa0780" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1aec279de1b4bf987a509af1b7b8aa0780" kindref="member">exposure</ref>;<sp/></highlight></codeline>
<codeline lineno="85" refid="classCaptureCAM__CL_1ae4cbea3bd517918aca81243658cfe0d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><ref refid="classCaptureCAM__CL_1ae4cbea3bd517918aca81243658cfe0d9" kindref="member">file</ref>;<sp/></highlight></codeline>
<codeline lineno="86" refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classCaptureCAM__CL_1a9ed9c3ca83e9a37ba035b63085d436f0" kindref="member">ImgPtr</ref>;<sp/></highlight></codeline>
<codeline lineno="87" refid="classCaptureCAM__CL_1ab33aa6f1a3c040f04500bad5cb06f7df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCaptureCAM__CL_1ab33aa6f1a3c040f04500bad5cb06f7df" kindref="member">isopened</ref>;<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialWrite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[]);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>display(int<sp/>dis);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>errMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errNum);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>frameindex_t<sp/><sp/><sp/><sp/>last_pic_nr;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nId;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>frameindex_t<sp/><sp/><sp/><sp/>cur_pic_nr;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>frameindex_t<sp/><sp/><sp/><sp/>nrOfPicturesToGrab;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>frameindex_t<sp/><sp/><sp/><sp/>nbBuffers;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>Fg_Struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fg;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samplePerPixel;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytePerSample;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>TriggerMode;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*applet;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>dma_mem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*memHandle;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[255];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComNr;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialInit(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkSerialCom(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*serialRefPtr;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="113" refid="structVideoCapture" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*myarray;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//PyObject*<sp/>VideoCapture_Display(VideoCapture<sp/>*self,<sp/>PyObject<sp/>*args);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1ga27dd152656bae1341cc3f4e53a7f7f95" kindref="member">VideoCapture_open</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1ga4a42098fa43557947a08120ac6364b8b" kindref="member">VideoCapture_isOpened</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1gaf93b7c64209bd94d09ef2ae33f4ee605" kindref="member">VideoCapture_release</ref>();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1ga0df26da877ca59521ff32a8a61667e10" kindref="member">VideoCapture_startAcquisition</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1gae8b9ac61654567b11a6bb33990444369" kindref="member">VideoCapture_stopAcquisition</ref>();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>VideoCapture_addTrigger(VideoCapture<sp/>*self,<sp/>PyObject<sp/>*args);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__capturecam_1ga0c09d99edd7283a79650234d342baae0" kindref="member">VideoCapture_grab</ref>();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1ga45ee1e6264cbc06e258e0695ad1d56c0" kindref="member">VideoCapture_retrieve</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1gab453bd40a3150500e47ece19f58c498f" kindref="member">VideoCapture_fgread</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1gad08dea252aab9516c283b80bd5180418" kindref="member">VideoCapture_set</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1ga9f1fb4911cda27db7a62de2ed8aa0a33" kindref="member">VideoCapture_get</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1ga1f885a9d90ee5ef63534859dbd3e00cc" kindref="member">VideoCapture_getMeta</ref>();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="group__capturecam_1gae8cb1af4302eef084c7c9fed80f3c45a" kindref="member">VideoCapture_serialSet</ref>(<ref refid="structVideoCapture" kindref="compound">VideoCapture</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h"/>
  </compounddef>
</doxygen>
