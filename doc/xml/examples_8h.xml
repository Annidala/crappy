<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="examples_8h" kind="file" language="C++">
    <compoundname>examples.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includedby refid="comediModule_8h" local="yes">/home/essais/Code/crappy_/crappy/sources/comediModule/comediModule.h</includedby>
    <includedby refid="comediModule_8c" local="yes">/home/essais/Code/crappy_/crappy/sources/comediModule/comediModule.c</includedby>
    <includedby refid="common_8c" local="yes">/home/essais/Code/crappy_/crappy/sources/comediModule/common.c</includedby>
    <incdepgraph>
      <node id="532">
        <label>/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h</label>
        <link refid="examples_8h"/>
        <childnode refid="533" relation="include">
        </childnode>
      </node>
      <node id="533">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="534">
        <label>/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h</label>
        <link refid="examples_8h"/>
        <childnode refid="535" relation="include">
        </childnode>
      </node>
      <node id="535">
        <label>/home/essais/Code/crappy_/crappy/sources/comediModule/comediModule.h</label>
        <link refid="comediModule_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structparsed__options" prot="public">parsed_options</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="examples_8h_1a151e90ada225013ff60a8fa0d02701a5" prot="public" static="no">
        <name>sec_to_nsec</name>
        <param><defname>x</defname></param>
        <initializer>((x)*1000000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="33" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="examples_8h_1aef3b5777e16a8dcb210103d700422b07" prot="public" static="no">
        <name>sec_to_usec</name>
        <param><defname>x</defname></param>
        <initializer>((x)*1000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="34" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="examples_8h_1a1a68afd4efb2c9d9045205fb287c731d" prot="public" static="no">
        <name>sec_to_msec</name>
        <param><defname>x</defname></param>
        <initializer>((x)*1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="35" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="examples_8h_1a8cb1a8a694d50ad2898d94128667177b" prot="public" static="no">
        <name>msec_to_nsec</name>
        <param><defname>x</defname></param>
        <initializer>((x)*1000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="36" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="examples_8h_1a3b6128000f73238006a65bd9d2d751c3" prot="public" static="no">
        <name>msec_to_usec</name>
        <param><defname>x</defname></param>
        <initializer>((x)*1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="37" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="examples_8h_1a7111c20443aec8e36e626a0e321518f0" prot="public" static="no">
        <name>usec_to_nsec</name>
        <param><defname>x</defname></param>
        <initializer>((x)*1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="38" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="examples_8h_1a45862ff819b12e4f66dad011f23f76e0" prot="public" static="no" mutable="no">
        <type>comedi_t *</type>
        <definition>comedi_t* device</definition>
        <argsstring></argsstring>
        <name>device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="11" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="examples_8h_1ab8c9307851897330729aece27d98951f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_parsed_options</definition>
        <argsstring>(struct parsed_options *options)</argsstring>
        <name>init_parsed_options</name>
        <param>
          <type>struct <ref refid="structparsed__options" kindref="compound">parsed_options</ref> *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="28" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/common.c" bodystart="20" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="examples_8h_1a2b00d77d2f56eb74ae393ed1e4ff0a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parse_options</definition>
        <argsstring>(struct parsed_options *options, int argc, char *argv[])</argsstring>
        <name>parse_options</name>
        <param>
          <type>struct <ref refid="structparsed__options" kindref="compound">parsed_options</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="29" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/common.c" bodystart="32" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="examples_8h_1ac83b9b6c470a6d973df7e8a5c90742ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* cmd_src</definition>
        <argsstring>(int src, char *buf)</argsstring>
        <name>cmd_src</name>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="30" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/common.c" bodystart="93" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="examples_8h_1ad8535b60e6e6b892d7e79616bd4cc715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dump_cmd</definition>
        <argsstring>(FILE *file, comedi_cmd *cmd)</argsstring>
        <name>dump_cmd</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>comedi_cmd *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h" line="31" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/comediModule/common.c" bodystart="118" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_EXAMPLES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_EXAMPLES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Definitions<sp/>of<sp/>some<sp/>of<sp/>the<sp/>common<sp/>code.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>comedi_t<sp/>*device;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="structparsed__options" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structparsed__options" kindref="compound">parsed_options</ref></highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subdevice;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aref;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>physical;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_chan;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_scan;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>freq;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_parsed_options(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structparsed__options" kindref="compound">parsed_options</ref><sp/>*options);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_options(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structparsed__options" kindref="compound">parsed_options</ref><sp/>*options,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmd_src(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_cmd(FILE<sp/>*file,comedi_cmd<sp/>*cmd);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sec_to_nsec(x)<sp/>((x)*1000000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sec_to_usec(x)<sp/>((x)*1000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sec_to_msec(x)<sp/>((x)*1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>msec_to_nsec(x)<sp/>((x)*1000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>msec_to_usec(x)<sp/>((x)*1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>usec_to_nsec(x)<sp/>((x)*1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/essais/Code/crappy_/crappy/sources/comediModule/examples.h"/>
  </compounddef>
</doxygen>
