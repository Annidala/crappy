<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="old_2CameraLink_8cpp" kind="file" language="C++">
    <compoundname>CameraLink.cpp</compoundname>
    <includes refid="old_2CameraLink_8h" local="yes">CameraLink.h</includes>
    <incdepgraph>
      <node id="560">
        <label>SisoDisplay.h</label>
      </node>
      <node id="557">
        <label>map</label>
      </node>
      <node id="550">
        <label>CameraLink.h</label>
        <link refid="old_2CameraLink_8h_source"/>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="554" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
        <childnode refid="560" relation="include">
        </childnode>
      </node>
      <node id="554">
        <label>memory.h</label>
      </node>
      <node id="549">
        <label>/home/essais/Code/crappy_/crappy/sources/Jai_lib/old/CameraLink.cpp</label>
        <link refid="old_2CameraLink_8cpp"/>
        <childnode refid="550" relation="include">
        </childnode>
      </node>
      <node id="555">
        <label>string.h</label>
      </node>
      <node id="556">
        <label>typeinfo</label>
      </node>
      <node id="551">
        <label>unistd.h</label>
      </node>
      <node id="553">
        <label>iostream</label>
      </node>
      <node id="558">
        <label>fgrab_prototyp.h</label>
      </node>
      <node id="559">
        <label>clser.h</label>
      </node>
      <node id="552">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;CameraLink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">Camera::Camera(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boardNr,</highlight><highlight class="comment">/*<sp/>unsigned<sp/>int<sp/>exposure,<sp/>unsigned<sp/>int<sp/>width,<sp/>unsigned<sp/>int<sp/>height,<sp/>unsigned<sp/>int<sp/>xoffset,<sp/>unsigned<sp/>int<sp/>yoffset,*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>framespersec)<sp/>:m_boardNr(boardNr),</highlight><highlight class="comment">/*<sp/>m_exposure(exposure),<sp/>m_width(width),<sp/>m_height(height),<sp/>m_xoffset(xoffset),<sp/>m_yoffset(yoffset),*/</highlight><highlight class="normal"><sp/>m_framespersec(framespersec)</highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/>last_pic_nr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/>timeout<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>fg=<sp/>NULL;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>camPort=<sp/>PORT_A;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>nrOfPicturesToGrab<sp/><sp/>=<sp/>GRAB_INFINITE;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>nbBuffers=<sp/>4;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>samplePerPixel=<sp/>1;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>bytePerSample=<sp/>1;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>TriggerMode=<sp/>1;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>memHandle<sp/>=NULL;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>serialRefPtr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>m_file<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>m_width<sp/>=<sp/>2560;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>m_height<sp/>=<sp/>2048;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>m_exposure<sp/>=<sp/>8000;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>m_xoffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>m_yoffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">Camera::~Camera(){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>close();</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Camera::toString(){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;board<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_boardNr<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;width:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_width<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;height:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_height<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exposure:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_exposure<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>offset:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_xoffset&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;y<sp/>offset:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_yoffset&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FPS:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_framespersec&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Camera::init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isSlave<sp/>=0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fg<sp/>=<sp/>Fg_InitEx(</highlight><highlight class="stringliteral">&quot;FullAreaGray8&quot;</highlight><highlight class="normal">,<sp/>m_boardNr,<sp/>isSlave))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>Fg_InitEx:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Fg_getLastErrorDescription(NULL));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Fg_loadConfig(fg,file)!=FG_OK){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nFile<sp/>config<sp/>loading<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>ComNr=m_boardNr*2;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>serialInit(ComNr);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Fg_setParameter(fg,FG_TRIGGERMODE,&amp;TriggerMode,camPort)==FG_OK){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nTrig<sp/>config<sp/>succeed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>totalBufferSize<sp/>=<sp/>m_width<sp/>*<sp/>m_height<sp/>*<sp/>samplePerPixel<sp/>*<sp/>bytePerSample<sp/>*<sp/>nbBuffers;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>memHandle<sp/>=<sp/>Fg_AllocMemEx(fg,<sp/>totalBufferSize,<sp/>nbBuffers);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>Fg_AllocMemEx:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Fg_getLastErrorDescription(fg));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>Fg_FreeGrabber(fg);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>toString();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(setExposure(m_exposure)!=FG_OK){throw<sp/>0;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>setWidth(m_width);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>setHeight(m_height);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>setYoffset(m_yoffset);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>setXoffset(m_xoffset);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitAlignment<sp/>=<sp/>FG_LEFT_ALIGNED;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(FG_BITALIGNMENT,<sp/></highlight><highlight class="stringliteral">&quot;FG_BITALIGNMENT&quot;</highlight><highlight class="normal">,<sp/>&amp;bitAlignment);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>CHECK(FG_FRAMESPERSEC,<sp/>&quot;FG_FRAMESPERSEC&quot;,<sp/><sp/>&amp;m_framespersec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(FG_TIMEOUT,<sp/></highlight><highlight class="stringliteral">&quot;FG_TIMEOUT&quot;</highlight><highlight class="normal">,<sp/>&amp;timeout);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>startAcquire();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>error){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;endl;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>close();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>init(file);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>close();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>init(file);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FG_OK;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Camera::startAcquire(){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Fg_AcquireEx(fg,<sp/>camPort,<sp/>nrOfPicturesToGrab,<sp/>ACQ_STANDARD,<sp/>memHandle))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Fg_AcquireEx()<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Fg_getLastErrorDescription(fg));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>Fg_FreeMemEx(fg,<sp/>memHandle);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>Fg_FreeGrabber(fg);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FG_ERROR;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FG_OK;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Camera::restart(){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Fg_AcquireEx(fg,<sp/>camPort,<sp/>nrOfPicturesToGrab,<sp/>ACQ_STANDARD,<sp/>memHandle))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Fg_AcquireEx()<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Fg_getLastErrorDescription(fg));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>Fg_FreeMemEx(fg,<sp/>memHandle);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>Fg_FreeGrabber(fg);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FG_ERROR;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>serialInit(ComNr);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FG_OK;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Camera::getBuffer(){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_pic_nr<sp/>=<sp/>Fg_getLastPicNumberBlockingEx(fg,<sp/>last_pic_nr<sp/>+<sp/>1,<sp/>camPort,<sp/>timeout,<sp/>memHandle);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_pic_nr<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(Data,</highlight><highlight class="stringliteral">&quot;Fg_getLastPicNumberBlockingEx(%li)<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,last_pic_nr+1,<sp/>Fg_getLastErrorDescription(fg));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;timeout:<sp/>&quot;<sp/>&lt;&lt;<sp/>timeout<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>string(Data);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_pic_nr<sp/>=<sp/>cur_pic_nr;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout=4;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ImgPtr<sp/>=<sp/>Fg_getImagePtrEx(fg,<sp/>last_pic_nr,<sp/>camPort,<sp/>memHandle);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ImgPtr;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>error){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;ERROR:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(5);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>timeout+=<sp/>100;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>last_pic_nr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>init(m_file);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>startAcquire();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getBuffer();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Camera::stop(){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>Fg_stopAcquire(fg,camPort);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Camera::close(){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>Fg_stopAcquire(fg,camPort);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>Fg_FreeMemEx(fg,<sp/>memHandle);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>Fg_FreeGrabber(fg);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>free(serialRefPtr);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/old/CameraLink.cpp"/>
  </compounddef>
</doxygen>
