{
  "name": "Crappy",
  "tagline": "Command and Real-time Acquisition Parallelized in Python",
  "body": "### What is Crappy ?\r\n\r\nCRAPPY is an acronym and stands for Command and Real-time Acquisition in \r\nParallelized PYthon.\r\n\r\nCrappy was first developped in the \"Laboratoire de MÃ©canique de Lille\", a \r\nmechanical research laboratory base in Lille,France, to provide a powerful \r\nand easy-to-use framework for material testing.\r\n\r\nIn order to better understand the mechanical behaviour of materials, we tend\r\nto setup tests, with more sensors, more precision and more complexity.\r\nAs we are one step before industrials, the testing machines we can buy are not\r\nadapted to our objectives and we have to develop our own softwares to improve\r\nour tests.\r\n\r\nThis is the original reason why we created Crappy : provide a framework to \r\ncontrol our tests and all of our hardware.\r\n\r\nTo this end, we made some choice that are now the keys of the framework:\r\n\r\n- **open-source** : it is important for us that everyone can use our work, \r\nand bring is own code to the world.\r\n    \r\n- **modular** : the hardware as to be, as much as possible, separated from the\r\nsoftware, to provide re-usable code for different setup.\r\n    \r\n- **simple** : Python as been chosen for its good performance and its high \r\nlevel. We are not developpers, and our users neither, so we can't afford\r\na low level programming language. We work with typical loop time of more \r\nthan 1 millisecond (10ms most of the time), and Python is enough for this.\r\nIt is also pretty easy to put a small piece of C/C++ in the Python if we \r\nneed a speedup.\r\n\r\n- **performance** : a great deal of work is made to ensure the performance of \r\nthe framework. Most tests requires a good repetablilty and a stability,\r\nand may become hazardous in case of not-handled issue.\r\n\r\n- **parallelization** : the key to a good test is the synchronisation between\r\nthe different sensors. Thsi is why we chose to massively parallelize our\r\nframework, to ensure everything can run at the same time. This is also one\r\nof the major difficulties we have to deal with in Python.\r\n\r\n## Installation\r\n\r\n<h2> Required Packages </h2>\r\n\r\n<ul>\r\n<li> Opencv </li>\r\n<li> SimpleITK </li>\r\n<li> matplotlib </li>\r\n<li> Python 2.7 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy) </li>\r\n<li> Scipy </li>\r\n<li> Skimage </li>\r\n</ul>\r\n\r\nOther packages should be installed to enable some functionalities:\r\n\r\n<ul>\r\n<li> xiApi </li>\r\n<li> Comedi (only avalaible on Linux)</li>\r\n<li> niFgen package from National Instrument (only avalaible on Windows)</li>\r\n<li> PyDaqmx </li>\r\n<li> labjack </li>\r\n</ul>\r\n\r\n<h2> Getting the Crappy Source Code </h2>\r\n\r\nThe packages can be installed using a terminal and the following commands:\r\n\r\n<h2>Installation in Linux</h2>\r\n\r\nThese steps have been tested for Ubuntu 14.04, 15.10 and 16.04 but should work with other distros as well.\r\n\r\n    git clone https://github.com/LaboratoireMecaniqueLille/crappy.git\r\n    cd crappy\r\n    sudo python setup.py install\r\n\r\n<h2>Installation in Windows</h2>\r\n\r\nThese steps have been tested for Windows 8.1 but should work with other distros as well.\r\n\r\n    git clone https://github.com/LaboratoireMecaniqueLille/crappy.git\r\n    cd crappy\r\n    setup.py install\r\n\r\n\r\n### Basics\r\n\r\n### Physical objects\r\n\r\nAs Crappy is originaly designed to control tests, the core of our framework\r\nis the hardware we work with.\r\n\r\nWe chose to divide it in three different categories.\r\n\r\nSensors\r\n-------\r\nIn Crappy, the sensors represent everything that can **acquire** a physical\r\nsignal. It can be an acquisition card, but also a camera, a thermocouple...\r\n\r\nActuators\r\n---------\r\non the other hand, actuators represent all the objects that can **interact on\r\nthe other part of the test**, and can be controled. The most common example are \r\nmotors.\r\n\r\nTechnicals\r\n----------\r\nSome hardware is **both a sensor and an actuator** by our definitions. This is for \r\nexample the case of a variable-frequency drive : they can set the speed of the\r\nmotor (the *actuator* part), but most of them can also read the position or the\r\nspeed of the motor the *sensor* part).\r\n\r\n### Blocks objects\r\n\r\nCrappy is based on a schematic architecture with single blocks linked between\r\neach others. Th blocks are the part that **do** and the *Links* are the parts \r\nthat carry informations between these blocks.\r\n\r\nThis way, you can simply write down on a paper the architecture of your test,\r\nwhat functions you need in which order, and write your code by reading your \r\npaper.\r\nBlocks are classes, running indefinitely in a single process. Some of them are\r\nalready implemented (see the reference manual), but you can also implement your\r\nown.\r\n\r\n\r\n### Links objects\r\n\r\nLinks are simply the part that carry information between the different blocks.\r\nYou just need to define the input and the output of a links, and it will \r\ntransfer all data from one block to the other.\r\n\r\n### Condition objects\r\n\r\nWith the Blocks and Links, we already have a working framework to design and \r\ncustom tests. But if you need to do something slightly different than what is \r\nimplemented in the Blocks, you have to re-write the whole thing.\r\n\r\nTo bring some flexibility to the whole system, we added conditions. They are \r\nsmall classes, implemented by the user, and they are added on the links.\r\nA link paired with a condition won't simply transfer data, but transfer the \r\nresult of the data passed by the condition.\r\nThat mean almost infinite possibilites :\r\n\r\n- Modify the values you are passing\r\n- Evaluate a composition of the values\r\n- Decide wether you should transfer - or not - the data\r\n- Transfer something completely different from the input values\r\n\r\nThis can be used to send a signal to another block (for example to synchronise \r\na camera), filter the signal with a mean, include numerical modelisation in \r\nreal-time in your test...",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}