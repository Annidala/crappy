<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__capturecam" kind="group">
    <compoundname>capturecam</compoundname>
    <title>CaptureCAM_CL</title>
    <innerclass refid="classCaptureCAM__CL" prot="public">CaptureCAM_CL</innerclass>
    <innerclass refid="structVideoCapture" prot="public">VideoCapture</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__capturecam_1ga27dd152656bae1341cc3f4e53a7f7f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_open</definition>
        <argsstring>(int device, const char *file)</argsstring>
        <name>VideoCapture_open</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>method to open a camera device through the cameraLink interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of the device to be openned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a call to <ref refid="group__videocapture_1ga607e342cefc7fd26cf9ada03e6c63154" kindref="member">VideoCapture_isOpened()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="120" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga4a42098fa43557947a08120ac6364b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_isOpened</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_isOpened</name>
        <briefdescription>
<para>It check if te camera is running or it has been stopped. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>Py_True if the camera is openned.</para></listitem><listitem><para>Py_False if the camera is closed. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="121" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gaf93b7c64209bd94d09ef2ae33f4ee605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_release</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_release</name>
        <briefdescription>
<para>Close the camera device: stop the acquisition and free the allocated memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="122" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga0df26da877ca59521ff32a8a61667e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>void VideoCapture_startAcquisition</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_startAcquisition</name>
        <briefdescription>
<para>Start the acquisition of a camera device. The acquisition is started automaticaly after a call to the constructor of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class. If you want to change some parameters of the acquisition, you have to call stopAcq() first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="123" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gae8b9ac61654567b11a6bb33990444369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>void VideoCapture_stopAcquisition</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_stopAcquisition</name>
        <briefdescription>
<para>Stop the acquisition of a camera device. The acquisition is started automaticaly after a call to the constructor of the <ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> class. If you want to change some parameters of the acquisition, you have to call stopAcq() first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="124" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga0c09d99edd7283a79650234d342baae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool VideoCapture_grab</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_grab</name>
        <briefdescription>
<para>Stop the acquisition and free the allocated memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the frame grabber has successfully grabbed a frame. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="126" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga45ee1e6264cbc06e258e0695ad1d56c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_retrieve</definition>
        <argsstring>(VideoCapture *self)</argsstring>
        <name>VideoCapture_retrieve</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Method to retrieve a frame to Python understanding format. It get the pointer to previously grabbed frame, and convert it to a numpy array object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>myDict, which contains the frame&apos;s data and the meta data of the grabbed frame.</para></listitem><listitem><para>Py_None if the current format has not been retrived. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="127" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="168" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gab453bd40a3150500e47ece19f58c498f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_fgread</definition>
        <argsstring>(VideoCapture *self)</argsstring>
        <name>VideoCapture_fgread</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Method to get the dictionnary containing the meta data, the frame data and the status of the grabbed frame. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A PyTuple containing the status of the grabbing as first position:<itemizedlist>
<listitem><para>Py_False if the grabbing has failled</para></listitem><listitem><para>Py_True if the grabbing has succeded and the disctionnary containing the data and meta data of the grabbed frame, or Py_None if the grabbing has failled. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="128" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="295" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gad08dea252aab9516c283b80bd5180418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_set</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_set</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Setting the value of a parameter from a frame grabber. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>As argument, a identification number is needed. If the identification number is unknown, the parameter name has to be given. It can be one of the following:<itemizedlist>
<listitem><para>FG_TIMEOUT: Time in seconds until device driver displays a timeout of the frame grabber.</para></listitem><listitem><para>FG_WIDTH: Width of the clipping image.</para></listitem><listitem><para>FG_HEIGHT: Height of the clipping image.</para></listitem><listitem><para>FG_XSHIFT: Number of invalid words at the beginning of a row (modulo of the width of the interface).</para></listitem><listitem><para>FG_XOFFSET: X-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_YOFFSET: Y-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_FRAMESPERSEC: Number of images per second.</para></listitem><listitem><para>FG_EXPOSURE: Exposure time in µs.</para></listitem><listitem><para>FG_FORMAT: Color format of the transferred image<orderedlist>
<listitem><para>8bit gray (FG_GRAY)</para></listitem><listitem><para>16bit color (FG_GRAY16)</para></listitem><listitem><para>24bit color (FG_COL24). See color management of the according frame grabber design.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_PORT: Logical number of the active CameraLink port.</para></listitem><listitem><para>FG_TRIGGERMODE: Trigger modes:<orderedlist>
<listitem><para>FREE_RUN</para></listitem><listitem><para>GRABBER_CONTROLLED</para></listitem><listitem><para>GRABBER_CONTROLLED_SYNCRON</para></listitem><listitem><para>ASYNC_SOFTWARE_TRIGGER</para></listitem><listitem><para>ASYNC_TRIGGER.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_STROBPULSEDELAY: Strobe delay to the trigger in µs.</para></listitem><listitem><para>FG_GLOBAL_ACCESS: Returns the value for the set plausibility access.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to required value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Py_True if the parameter was read correctly Py_False if an invalid parameter has been entered or if the entered value is besides valid ranges. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="129" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga9f1fb4911cda27db7a62de2ed8aa0a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_get</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_get</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Reading the current value of a parameter from a frame grabber. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>As argument, a identification number is needed. If the identification number is unknown, the parameter name has to be given. It can be one of the following:<itemizedlist>
<listitem><para>FG_CAMSTAUS: If a camera signal is on CameraLink port value is 1 else 0.</para></listitem><listitem><para>FG_REVNR: Current revision version of camera DLL.</para></listitem><listitem><para>FG_TIMEOUT: Time in seconds until device driver displays a timeout of the frame grabber.</para></listitem><listitem><para>FG_WIDTH: Width of the clipping image.</para></listitem><listitem><para>FG_MAXWIDTH: Maximum width of the clipping image.</para></listitem><listitem><para>FG_HEIGHT: Height of the clipping image.</para></listitem><listitem><para>FG_MAXHEIGHT: Maximum height of the clipping image.</para></listitem><listitem><para>FG_XSHIFT: Number of invalid words at the beginning of a row (modulo of the width of the interface).</para></listitem><listitem><para>FG_XOFFSET: X-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_YOFFSET: Y-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_FRAMESPERSEC: Number of images per second.</para></listitem><listitem><para>FG_EXPOSURE: Exposure time in µs.</para></listitem><listitem><para>FG_FORMAT: Color format of the transferred image<orderedlist>
<listitem><para>8bit gray (FG_GRAY)</para></listitem><listitem><para>16bit color (FG_GRAY16)</para></listitem><listitem><para>24bit color (FG_COL24). See color management of the according frame grabber design.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_PORT: Logical number of the active CameraLink port.</para></listitem><listitem><para>FG_PIXELDEPTH: Returns the depth of color of the pixel.</para></listitem><listitem><para>FG_LINEALIGNMENT: Returns the alignment of a line (in bits).</para></listitem><listitem><para>FG_TRANSFER_LEN: Returns the length of the last DMA transfer.</para></listitem><listitem><para>FG_TRIGGERMODE: Trigger modes:<orderedlist>
<listitem><para>FREE_RUN</para></listitem><listitem><para>GRABBER_CONTROLLED</para></listitem><listitem><para>GRABBER_CONTROLLED_SYNCRON</para></listitem><listitem><para>ASYNC_SOFTWARE_TRIGGER</para></listitem><listitem><para>ASYNC_TRIGGER.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_STROBPULSEDELAY: Strobe delay to the trigger in µs.</para></listitem><listitem><para>FG_TWOCAMMODEL: Returns the value, if the loaded camera applet is a dual (1) or a single applet (0).</para></listitem><listitem><para>FG_HDSYNC: Returns the HDSYNC value.</para></listitem><listitem><para>FG_GLOBAL_ACCESS: Returns the value for the set plausibility access.</para></listitem><listitem><para>FG_BOARD_INFORMATION: Information on the board type:<orderedlist>
<listitem><para>BINFO_BOARD_TYPE:<itemizedlist>
<listitem><para>0xa40 for microEnable IV-Base x1</para></listitem><listitem><para>0xa41 for microEnable IV-Full x1</para></listitem><listitem><para>0xa44 for microEnable IV-Full x4</para></listitem></itemizedlist>
</para></listitem><listitem><para>BINFO_POCL:<itemizedlist>
<listitem><para>0 for microEnable IV-Base x1</para></listitem><listitem><para>1 for microEnable IV-Base x1 PoCL </para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>Py_True if the parameter was read correctly</para></listitem><listitem><para>Py_False if an invalid parameter has been entered. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="130" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="405" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga1f885a9d90ee5ef63534859dbd3e00cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_getMeta</definition>
        <argsstring>()</argsstring>
        <name>VideoCapture_getMeta</name>
        <briefdescription>
<para>Method to get meta data of the grabbed frame. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>myDict, which contains the meta data of the grabbed frame:<orderedlist>
<listitem><para>the width of the grabbed frame</para></listitem><listitem><para>the height of the grabbed frame </para></listitem></orderedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="131" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="259" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gae8cb1af4302eef084c7c9fed80f3c45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * VideoCapture_serialSet</definition>
        <argsstring>(VideoCapture *self, PyObject *args)</argsstring>
        <name>VideoCapture_serialSet</name>
        <param>
          <type><ref refid="structVideoCapture" kindref="compound">VideoCapture</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Setting the value of a parameter from the serial interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>will be written to the serial port. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="132" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/pyCameraLink.cpp" bodystart="137" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gab72d29bf87d08bd6bc892b2820fd417a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CaptureCAM_CL::CaptureCAM_CL</definition>
        <argsstring>()</argsstring>
        <name>CaptureCAM_CL</name>
        <briefdescription>
<para>Constructor of <ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref> Class It Initialize the camera class. </para>        </briefdescription>
        <detaileddescription>
<para>Constructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="63" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga14053466a32e92a11db0ac810cccb075" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>CaptureCAM_CL::~CaptureCAM_CL</definition>
        <argsstring>()</argsstring>
        <name>~CaptureCAM_CL</name>
        <briefdescription>
<para>Destructor of <ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref> Class. </para>        </briefdescription>
        <detaileddescription>
<para>Desctructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="64" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga071845e2dd4415f7e5bbfd437c0d5e65" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CaptureCAM_CL::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
<para>This function initialize the <ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref> attributes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="91" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="49" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga16b6491e0fe8caae23d169dacc87589e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CaptureCAM_CL::open</definition>
        <argsstring>(int index, const char *file)</argsstring>
        <name>open</name>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defname>wIndex</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Initialize camera input. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the camera device, starts at 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>path to the configuration file of the camera, cannot be Null. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the camera was correctly openned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="65" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="96" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga3c0090ca5fa9fa481f1945cfd56b79b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int CaptureCAM_CL::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stop the acquisition of a camera device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="70" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="124" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga0de12aa713d189d122e945956ce18927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CaptureCAM_CL::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Close the camera device: stop the acquisition and free the allocated memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="66" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga0e323148cfd234d43a32918386d021d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CaptureCAM_CL::grabFrame</definition>
        <argsstring>()</argsstring>
        <name>grabFrame</name>
        <briefdescription>
<para>Grab a frame, the data pointer is stored in the ImgPtr attribute. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the frame grabber has successfully grabbed a frame. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="67" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="151" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gad18ae6f1205062f91f2e113d5f93ea99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CaptureCAM_CL::resetCvImage</definition>
        <argsstring>()</argsstring>
        <name>resetCvImage</name>
        <briefdescription>
<para>reset the width, height and format attributes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="73" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="185" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gaaeae6486152d120aba8122ac7957045f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CaptureCAM_CL::getProperty</definition>
        <argsstring>(int)</argsstring>
        <name>getProperty</name>
        <param>
          <type>int</type>
          <defname>property_id</defname>
        </param>
        <briefdescription>
<para>Reading the current value of a parameter from a frame grabber. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>As argument, a identification number is needed. If the identification number is unknown, the parameter name has to be given. It can be one of the following:<itemizedlist>
<listitem><para>FG_CAMSTAUS: If a camera signal is on CameraLink port value is 1 else 0.</para></listitem><listitem><para>FG_REVNR: Current revision version of camera DLL.</para></listitem><listitem><para>FG_TIMEOUT: Time in seconds until device driver displays a timeout of the frame grabber.</para></listitem><listitem><para>FG_WIDTH: Width of the clipping image.</para></listitem><listitem><para>FG_MAXWIDTH: Maximum width of the clipping image.</para></listitem><listitem><para>FG_HEIGHT: Height of the clipping image.</para></listitem><listitem><para>FG_MAXHEIGHT: Maximum height of the clipping image.</para></listitem><listitem><para>FG_XSHIFT: Number of invalid words at the beginning of a row (modulo of the width of the interface).</para></listitem><listitem><para>FG_XOFFSET: X-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_YOFFSET: Y-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_FRAMESPERSEC: Number of images per second.</para></listitem><listitem><para>FG_EXPOSURE: Exposure time in µs.</para></listitem><listitem><para>FG_FORMAT: Color format of the transferred image<orderedlist>
<listitem><para>8bit gray (FG_GRAY)</para></listitem><listitem><para>16bit color (FG_GRAY16)</para></listitem><listitem><para>24bit color (FG_COL24). See color management of the according frame grabber design.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_PORT: Logical number of the active CameraLink port.</para></listitem><listitem><para>FG_PIXELDEPTH: Returns the depth of color of the pixel.</para></listitem><listitem><para>FG_LINEALIGNMENT: Returns the alignment of a line (in bits).</para></listitem><listitem><para>FG_TRANSFER_LEN: Returns the length of the last DMA transfer.</para></listitem><listitem><para>FG_TRIGGERMODE: Trigger modes:<orderedlist>
<listitem><para>FREE_RUN</para></listitem><listitem><para>GRABBER_CONTROLLED</para></listitem><listitem><para>GRABBER_CONTROLLED_SYNCRON</para></listitem><listitem><para>ASYNC_SOFTWARE_TRIGGER</para></listitem><listitem><para>ASYNC_TRIGGER.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_STROBPULSEDELAY: Strobe delay to the trigger in µs.</para></listitem><listitem><para>FG_TWOCAMMODEL: Returns the value, if the loaded camera applet is a dual (1) or a single applet (0).</para></listitem><listitem><para>FG_HDSYNC: Returns the HDSYNC value.</para></listitem><listitem><para>FG_GLOBAL_ACCESS: Returns the value for the set plausibility access.</para></listitem><listitem><para>FG_BOARD_INFORMATION: Information on the board type:<orderedlist>
<listitem><para>BINFO_BOARD_TYPE:<itemizedlist>
<listitem><para>0xa40 for microEnable IV-Base x1</para></listitem><listitem><para>0xa41 for microEnable IV-Full x1</para></listitem><listitem><para>0xa44 for microEnable IV-Full x4</para></listitem></itemizedlist>
</para></listitem><listitem><para>BINFO_POCL:<itemizedlist>
<listitem><para>0 for microEnable IV-Base x1</para></listitem><listitem><para>1 for microEnable IV-Base x1 PoCL </para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>The value of the parameter. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="71" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="247" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gaabeb52911d3a8c016bffd9ac1602c985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CaptureCAM_CL::setProperty</definition>
        <argsstring>(int, int)</argsstring>
        <name>setProperty</name>
        <param>
          <type>int</type>
          <defname>property_id</defname>
        </param>
        <param>
          <type>int</type>
          <defname>value</defname>
        </param>
        <briefdescription>
<para>Setting the value of a parameter from a frame grabber. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property_id</parametername>
</parameternamelist>
<parameterdescription>
<para>As argument, a identification number is needed. If the identification number is unknown, the parameter name has to be given. It can be one of the following:<itemizedlist>
<listitem><para>FG_TIMEOUT: Time in seconds until device driver displays a timeout of the frame grabber.</para></listitem><listitem><para>FG_WIDTH: Width of the clipping image.</para></listitem><listitem><para>FG_HEIGHT: Height of the clipping image.</para></listitem><listitem><para>FG_XSHIFT: Number of invalid words at the beginning of a row (modulo of the width of the interface).</para></listitem><listitem><para>FG_XOFFSET: X-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_YOFFSET: Y-offset from the left top corner in pixel.</para></listitem><listitem><para>FG_FRAMESPERSEC: Number of images per second.</para></listitem><listitem><para>FG_EXPOSURE: Exposure time in µs.</para></listitem><listitem><para>FG_FORMAT: Color format of the transferred image<orderedlist>
<listitem><para>8bit gray (FG_GRAY)</para></listitem><listitem><para>16bit color (FG_GRAY16)</para></listitem><listitem><para>24bit color (FG_COL24). See color management of the according frame grabber design.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_PORT: Logical number of the active CameraLink port.</para></listitem><listitem><para>FG_TRIGGERMODE: Trigger modes:<orderedlist>
<listitem><para>FREE_RUN</para></listitem><listitem><para>GRABBER_CONTROLLED</para></listitem><listitem><para>GRABBER_CONTROLLED_SYNCRON</para></listitem><listitem><para>ASYNC_SOFTWARE_TRIGGER</para></listitem><listitem><para>ASYNC_TRIGGER.</para></listitem></orderedlist>
</para></listitem><listitem><para>FG_STROBPULSEDELAY: Strobe delay to the trigger in µs.</para></listitem><listitem><para>FG_GLOBAL_ACCESS: Returns the value for the set plausibility access.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to required value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FG_OK if the parameter was read correctly FG_INVALID_PARAMETER if an invalid parameter has been entered. FG_VALUE_OUT_OF_RANGE The entered value is besides valid ranges. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="72" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="333" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga41cc34667ccf43936c6e2fa2fa0df9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CaptureCAM_CL::startAcquire</definition>
        <argsstring>()</argsstring>
        <name>startAcquire</name>
        <briefdescription>
<para>This function start a continuous grabbing. Having started, an infinite number of image will be grabbed. By default, the maximum image number is set to GRAB_INFINITE (nrOfPicturesToGrab) If a timeout occurs, the grabbing will be stopped. To manually stop the grabbing, use <ref refid="group__capturecam_1ga0de12aa713d189d122e945956ce18927" kindref="member">CaptureCAM_CL::close()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>FG_OK if the acquisition has started, FG_ERROR if it has failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="68" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="375" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1gaf39e3c68b693bdf10637923ef51ff1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CaptureCAM_CL::restart</definition>
        <argsstring>()</argsstring>
        <name>restart</name>
        <briefdescription>
<para>This function restart the device, and re-init the serial port communication. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>FG_OK if the acquisition ha restarted, FG_ERROR if it has failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="69" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="418" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="group__capturecam_1ga922c7abcf4d56446959bf826f8b2ae95" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CaptureCAM_CL::errMsg</definition>
        <argsstring>(const char *msg, int errNum)</argsstring>
        <name>errMsg</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>errNum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="92" column="1" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.cpp" bodystart="436" bodyend="445"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__capturecam_1gab6e6ee86736f9ebb56e74ae21bf3ff8a" prot="public" static="no">
        <name>NPY_NO_DEPRECATED_API</name>
        <initializer>NPY_1_7_API_VERSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="24" column="17" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__capturecam_1ga808e08638be3cba36e36759e5b150de0" prot="public" static="no">
        <name>DLLEXPORT</name>
        <initializer>extern &quot;C&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="51" column="11" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__capturecam_1gad7f47a30901743cfd2322e26bf9105be" prot="public" static="no">
        <name>CHECK</name>
        <param><defname>param</defname></param>
        <param><defname>paramDescr</defname></param>
        <param><defname>Value</defname></param>
        <initializer>if((Fg_setParameter(fg,param,Value, camPort)&lt;0)){  \
					      sprintf(Data,&quot;Fg_setParameter(%s) failed: %s\n&quot;,paramDescr, Fg_getLastErrorDescription(fg)); \
					      cout &lt;&lt; &quot;ERROR:&quot; &lt;&lt; Data &lt;&lt; endl; \
					      throw string(Data);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="52" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__capturecam_1gade1cd323cec87e552290353d21b56ebc" prot="public" static="no">
        <name>HandleResult</name>
        <param><defname>res</defname></param>
        <param><defname>place</defname></param>
        <initializer>if (res!=FG_OK) {printf(&quot; An error occured: %s (%d)\n&quot;,place,res);close();}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" line="56" column="9" bodyfile="/home/essais/Code/crappy_/crappy/sources/Jai_lib/CameraLink.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classCaptureCAM__CL" kindref="compound">CaptureCAM_CL</ref> class to control devices throught camera link interface. </para>    </detaileddescription>
  </compounddef>
</doxygen>
