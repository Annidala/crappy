/*! \mainpage  What is Crappy ?

CRAPPY is an acronym and stands for Command and Real-time Acquisition in
Parallelized PYthon.

Crappy is developped in the "Laboratoire de MÃ©canique de Lille", a
mechanical research laboratory based in Lille, France to provide a powerful
and easy-to-use framework for material testing.

In order to understand the mechanical behaviour of materials, we tend
to setup tests with more sensors, more precision and more complexity.
As we are one step ahead of industrials, the testing machines we can buy may
not be adapted to our objectives and we have to develop our own softwares to
improve our tests.

This is the original reason why we created Crappy : provide a framework to
control our tests and all of our hardware.

To this end, we made some choice that are now the keys of the framework:

- **open-source** : it is important for us that everyone can use our work,
and bring its own code to the world.

- **modular** : the hardware has to be, as much as possible, separated from the
software, to provide re-usable code for different setup.

- **simple** : Python as been chosen for its high level.
We are not developpers, and neither are our users , so we cannot afford to use
a low level programming language. We work with typical loop time of more
than 1 millisecond (10ms most of the time), and Python is enough for this.
It is also pretty easy to put a small piece of C/C++ in the Python if we
need a speedup.

- **performance** : a great deal of work is made to ensure the performance of
the framework. Most tests requires a good repetablilty and a stability,
and may become hazardous in case of not-handled issue.

- **parallelization** : the key to a good test is the synchronisation between
the different sensors. This is why we chose to massively parallelize our
framework, to ensure everything can run at the same time. This is also one
of the major difficulties we have to deal with in Python.
*/

/*! \page install Installation

<h2> Required Packages </h2>

<ul>
<li> Python 2 (>= 2.7) </li>
<li> Numpy (>=1.5) </li>
<li> Scipy (>= 0.17) </li>
<li> Opencv (>= 3.0) </li>
<li> matplotlib (>= 1.5.3) </li>
<li> Scikit-image (>= 0.11) </li>
</ul>

Other packages can be installed to enable some functionalities:

<ul>
<li> xiApi </li>
<li> labjack </li>
<li> PyCUDA </li>
<li> Comedi (only avalaible on Linux)</li>
<li> niFgen package from National Instrument (only avalaible on Windows)</li>
<li> PyDaqmx </li>
</ul>

<h2>Installation in Linux</h2>

These steps have been tested for Ubuntu 14.04, 15.10 and 16.04 but should
work with other distros as well.

First, you should install all the required python modules using pip.

    sudo apt-get install python-pip
    sudo pip install module-name

You may need the dev packages for python and nump and also python-imaging-tk:

    sudo apt-get install python-dev python-imaging-tk

You can then install crappy, get the sources using git and use setup script:

    git clone https://github.com/LaboratoireMecaniqueLille/crappy.git
    cd crappy
    sudo python setup.py install

<h2>Installation in Windows</h2>

These steps have been tested for Windows 8.1 but should work with other
versions as well.
<b>Make sure you are using the x64 version of python</b> or the C++ modules will
not compile properly
Install the dependencies, you can use

    pip install module-name

for most modules, but some may fail and need a wheel file
built for windows. We had to do this for numpy (with mkl) and scikit-image
Just find the correct version at http://www.lfd.uci.edu/~gohlke/pythonlibs/
and simply run

    pip install wheel_file.whl

Also, you will need Visual C++ for Python 2.x (your version of python) in
order to compile C++ modules
If you want to use Ximea cameras, don't forget to install XiAPI and
add c:\\XIMEA\\API\\x64 to your path

Then you can get the source code and install it

    git clone https://github.com/LaboratoireMecaniqueLille/crappy.git
    cd crappy
    setup.py install


*/

/*! \page page2 Basics


\tableofcontents
<ul>
<li> \subpage technical </li>
<li> \subpage blocks </li>
<li> \subpage links </li>
<li> \subpage condition </li>
</ul>
*/


/*! \page technical Technical classes

This is the core of the module: this regroups all the classes that actually
DO the stuff we want. Most of them are used to represent hardware, but there
can also be software classes, for example the classes that process data like
videoextensometry. They are organized in categories depending on their use.

Each catergory is in a different subfolder of Crappy and has a basis class.
Every class the enters in this category must be in this folder (or a subfloder)
and inherit from the parent class. The parent class is always based on a
metaclass that counts and keeps a reference to each child class. This allows
complete introspection to list and instanciate easily those classes. Note that
each metaclass may define conventions for the child classes so they can be used
by the blocks in a standard way.

For example: camera folder holds all the classes related to cameras.
The file camera/camera.py defines a metaclass MetaCam and a class Camera
based on MetaCam. MetaCam keeps track of all the classes in MetaCam.classes.
The class Camera must be parent of all cameras, so they will also be based on
MetaCam. Finally, camera/__init__.py defines camera_list = MetaCam.classes,
which is a dict containing all available classes with their names as key.
This provides a simple way to instanciate them from a 'name' parameter.
The MetaCam class makes sure that all cameras have the needed methods (open,
get_image,close,etc...). This allow replacing a camera with another without
changing the code using it.

As for now, their are 4 different categories of technical classes,
this may change as more hardware is implemented.

Actuators
-------
These classes represent physical actuators like motors or the axis of a machine.
They must have a "open" method and at least one of "set_speed" or "set_cmd".
They can also have get_pos and/or get_speed method to read informations.

Cameras
---------
The name is pretty self-explenatory: it regroups all the classes that acquire
images. They must have "open" and "get_image" methods. "get_image" must return
a tuple containing time since epoch in seconds and a numpy array containing
the image. They include a setting mechanism for user-friendly camera settings,
see the camera class for more details.

Inout
----------
Originally meant for IO boards, it includes all the hardware that can read
and/or send values.

Tools
----------
This category is for purely software classes. These classes are either used in
several blocks or complicated enough to be isolated in their own file. The goal
is to keep the code of the blocks as simple as possible.


*/

/*! \page blocks Blocks objects

The goal of Crappy is to make real parallel execution simple. This is why
it is organised as "blocks". A block will spawn a process and run until the
test is over. A common Crappy program will create several blocks,
link them (see links) and call crappy.start(). This will make sure that all the
processes start running together.

*/


/*! \page links Links objects

Each process has its own scope, so in order to share information they need
objects to communicate. This is the role of the Link object. It relies on the
multiprocessing.Pipe class to send data from a block to another.

A convention has been set-up to format data throught the links: they can only
send Dict objects. This forces explicit labelling of all the data going through
the link.

In addition to the links basic methods send, poll and recv,
the Block base class "MasterBlock" implements several methods
to work with links:
 - send: Will send to all the outgoing links
 - get_last: To get all the latest data from all incoming links
and more.

The links can be accessed from the block in self.outputs and self.inputs for
low-level management of the links.

The behavior can be edited using blocking=True/False, see the Link
and MasterBlock documentation for more details.


*/

/*! \page  condition Condition objects

With the Blocks and Links, we already have a working framework to design and
custom tests. But if you need to do something slightly different than what is
implemented in the Blocks, you have to re-write the whole thing.

To bring some flexibility to the whole system, we added conditions. They are
small classes, implemented by the user, and they are added on the links.
A link paired with a condition won't simply transfer data, but transfer the
result of the data passed by the condition.
That mean almost infinite possibilites :

- Modify the values you are passing
- Evaluate a composition of the values
- Decide wether you should transfer - or not - the data
- Transfer something completely different from the input values

This can be used to send a signal to another block (for example to synchronise
a camera), filter the signal with a mean, include numerical modelisation in
real-time in your test...
*/

/*! \page tuto1 How to use C++ designed hardware drivers with Crappy ?

There is lot of hardware only available for C++ or C platforms, but it can be easily bound with Python.
Here we will give you an example on how to bind C language to make it object oriented (as we use to in Python).

<h1> how to bind C/C++ with Crappy? </h1>

This gives a complete example on how to bind C and C++ language with Python and add it to the Crappy package.
Linux and Windows are both used for building.

\warning
    This is not a C++ tutorial, some notion are used here, please refer to the tutorials below if you are not a C or C++
    developer. /n
    C++ tutorials:
    <ul>
        <li> <a  href= "https://openclassrooms.com/courses/programmez-avec-le-langage-c" > openclassrooms (fr) </a> </li>
        <li> <a  href= "http://www.cplusplus.com/doc/tutorial/" > cplusplus (en) </a> </li>
    </ul>
    C tutorials:
    <ul>
        <li> <a  href= "https://openclassrooms.com/courses/apprenez-a-programmer-en-c" > openclassroom (fr) </a> </li>
        <li> <a  href= "http://www.cprogramming.com/tutorial/c-tutorial.html" > cprogramming (en) </a> </li>
    </ul>

Under Linux, you must install the python-dev package to ensure that you can use the Python.h library in the C or C++
code.

\code
sudo apt-get install python-dev
\endcode

Under Windows, there is no python-dev package, but the python installer for windows will install a subdirectory in
the python dir directory:
    - C:\\Python\\include
which contains the Python.h.

<h2> First example </h2>

<h3>The C++ code (hello.cpp)</h3>
\code
// Python header contains all the functions definitions to handle python object in C/C++.
#include <Python.h>
// Header that defines the standard input/output stream objects.
#include <iostream>

// define the namespace to use.
using namespace std;

// The functions bound with python have to return a PyObject understandable in Python.
static PyObject* hello(PyObject* self, PyObject* args){
    const char* name;
    // it parse the args argument and look for a string
    // and set the name var with the parsed value.
    // if it fails, PyArg_ParseTuple return False, True otherwise.
    // returning NULL directly allows to raise an exception in Python.
    if(!PyArg_ParseTuple(args, "s", &name))
        return NULL;
    cout << "Hello " << name << endl;

    // This should be a void function, so we return the Python None.
    Py_RETURN_NONE;
}

// definition of a PyMethodDef object (defined in the python library)
// contains the functions definition to be bound with python.
static PyMethodDef HelloMethods[] =
{
    {"hello", hello, METH_VARARGS, "Say hello to somebody."},
    {NULL, NULL, 0, NULL}
};

PyMODINIT_FUNC inithelloModule(void){
    (void) Py_InitModule("helloModule", HelloMethods);
}
\endcode

Each functions to bind have to return a PyObject pointer.
Then, if a function needs to get arguments, there a passed to args, and first parsed in the function
with PyArgs_ParseTuple. If the argument parsed is not a char it return NULL, returning a NULL alows to directly raise
a python error.
Here there is no need to return an object, so we return None (equivalent of C++ NULL).

Then, to bind the hello function we need to create a PyMethodDef which contains the function definition:
    \code
    {"hello", hello, METH_VARARGS, "Say hello to somebody."}
    \endcode

    The first element will be the name of the function in python. The second element is the function to bind.
    The third element is METH_VARARGS if the function get arguments, or METH_NOARGS otherwise.
    The last element correspond to a description of the function, to appear in the function help.

<h3> Adding the binding to Crappy </h3>

To use the hello method defined in hello.cpp, we need to compile our project.
This is automatically supported by the distutil package used to create the Crappy package.

We have to use the Extension module in distulil.core.

Example:

    \code
    helloModule = Extension('technical.helloModule',
                         sources=['sources/hello/hello.cpp'],
                         extra_compile_args=["-l", "python2.7"])

    extentions.append(helloModule)
    \endcode

Extension take several argument, the first one is the full name of the extension, including any packages.
Not a filename or pathname, but Python dotted name. Here we want to put the extension in technical, to import our module
as crappy.technical.helloModule, so the extension name is 'technical.helloModule'.

\note
    Here, we called the extension helloModule, so the init method defined must be defined like follow:
        \code
        PyMODINIT_FUNC inithelloModule(void){
            (void) Py_InitModule("helloModule", HelloMethods);
        }
        \endcode
    - the name of the function must be: init+[the name of your extension]: inithelloModule.
    - Py_initModule must initialize a module with the same name "hellModule".

extensions is just a list containing all the extensions to build, so we must add the helloModule to it.

finally, we import our module in technical/__init__.py.

Now we can build our module with:

\code
sudo python setup.py install
\endcode

The module helloModule.so will end up in /usr/local/lib/python2.7/dist-packages/crappy2-X.X.X-py2.7-linux-x86_64.egg/crappy2/technical
and a helloModule.py file will be created to allow the import of the module:

\code
def __bootstrap__():
    global __bootstrap__, __loader__, __file__
    import sys, pkg_resources, imp
    __file__ = pkg_resources.resource_filename(__name__, 'helloModule.so')
    __loader__ = None; del __bootstrap__, __loader__
    imp.load_dynamic(__name__,__file__)
__bootstrap__()
\endcode

So we can now simply use our module:
\code
In [1]: import crappy2
In [2]: crappy2.technical.helloModule.hello("Crappy")
Hello Crappy
\endcode


<h2> A more oriented oject module </h2>


Let try to define a class that is similar to the following python class:

\code

class Hello:

    def __init__(self, name="Crappy"):
        self.name = name

    def say_hello(self):
        print 'hello ', self.name

    def get_name(self):
        return self.name

\endcode


we first need to define the functions to construct our future class:
    - a new method
    - a constructor
    - a destructor
And a structure which will contain the class attributes.

\n
Here, the struct contains two elements.
The first, PyObject_HEAD must be always defined, it represent the type of object.
The second element represent our attribute 'name'.

\code

// define a struct to build our Python module, this is similar to the dict of a Python class.
typedef struct {
    PyObject_HEAD
    char *name;
} Hello;

\endcode

The new method parse the arguments and keywords arguments, to initialize the structure defined before, which will be passed
as first argument for each method (similar to the python self).

\code

// This function will be called at the creation of our Python class, it allocates memory, parse the arguments and return
// the self struct.
static PyObject *Hello_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    Hello *self;
    self = (Hello *)type->tp_alloc(type, 0);
    static char *kwlist[] = {"name", NULL};
    if (self != NULL) {
        if (! PyArg_ParseTupleAndKeywords(args, kwds, "|s", kwlist, &self->name)){
                return NULL;
        }
    }
    return (PyObject *)self;
}
\endcode

The constructor parses the arguments and keywords arguments.
The "name" argument is optional: "|s" string or nothing; name is set by default to "Crappy".
\code
static int Hello_init(Hello *self, PyObject *args, PyObject *kwds)
{
    static char *kwlist[] = {"name", NULL};

    self->name = "Crappy";
    if (! PyArg_ParseTupleAndKeywords(args, kwds, "|s", kwlist, &self->name)){
            return NULL;
    }
    return 0;
}

static void Hello_dealloc(Hello* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

\endcode

We then define our two method like before:

\note
    To return a value, we need to use the Py_BuildValue function, to convert C++ type to python type:
    In this way, we directly get a understandable python object.

\code
PyObject*
Hello_get(Hello *self)
{
    return Py_BuildValue("s", self->name);
}

PyObject*
Hello_print(Hello *self)
{

	cout << "Hello " << self->name << endl;

	Py_RETURN_NONE;
}
\endcode


To define a class which can be bound with Python, we need to define the structure of it, with a PyTypeObject.
We have to define:
    - which function is the constructor
    - which one is the destructor, the new method...
    - what is the name of the class
    - its size
    - its methods

\code

static PyMethodDef Hello_methods[] = {
        {"say_hello", (PyCFunction)Hello_print, METH_NOARGS,
	 "Say hello to somebody."},
	 {"get_name", (PyCFunction)Hello_get, METH_NOARGS,
	 "Return the name attribute."},
    {NULL}
};

static PyMethodDef module_methods[] = {
    {NULL}
};

static PyTypeObject helloType = {
    PyObject_HEAD_INIT(NULL)
    0,                         /*ob_size*/
    "Hello",             /*tp_name*/
    sizeof(Hello),             /*tp_basicsize*/
    0,                         /*tp_itemsize*/
    (destructor)Hello_dealloc, /*tp_dealloc*/
    0,                         /*tp_print*/
    0,                         /*tp_getattr*/
    0,                         /*tp_setattr*/
    0,                         /*tp_compare*/
    0,                         /*tp_repr*/
    0,                         /*tp_as_number*/
    0,                         /*tp_as_sequence*/
    0,                         /*tp_as_mapping*/
    0,                         /*tp_hash */
    0,                         /*tp_call*/
    0,                         /*tp_str*/
    0,                         /*tp_getattro*/
    0,                         /*tp_setattro*/
    0,                         /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /*tp_flags*/
    "Hello objects",           /* tp_doc */
    0,		               /* tp_traverse */
    0,		               /* tp_clear */
    0,		               /* tp_richcompare */
    0,		               /* tp_weaklistoffset */
    0,		               /* tp_iter */
    0,		               /* tp_iternext */
    Hello_methods,             /* tp_methods */
    0,             /* tp_members */
    0,                         /* tp_getset */
    0,                         /* tp_base */
    0,                         /* tp_dict */
    0,                         /* tp_descr_get */
    0,                         /* tp_descr_set */
    0,                         /* tp_dictoffset */
    (initproc)Hello_init,      /* tp_init */
    0,                         /* tp_alloc */
    Hello_new,                 /* tp_new */
};

\endcode

Finally, as we did on the first example, the init method as to be defined:

    Py_InitModule3 create the module and return its instance (here empty).
    We can add our created objects, here helloType which defined our class.
\note
    When returning an object, it returns a reference to it, each object has a reference counter
    this is made automatically for memory management issue, to know how many different places there are that have a reference
    to an object. When an object's reference count becomes 0, the object is automatically deallocated.
    This has to be made by yourself when dealing with C-C++/Python bindings. (With Py_INCREF, Py_DECREF).
    Please see Python C-api documentation for more details.

\code
    PyMODINIT_FUNC
    inithelloModule(void)
    {
        try{
            PyObject* m;
            if (PyType_Ready(&helloType) < 0)
                cout << "unable to install ximea module" << endl;

            m = Py_InitModule3("helloModule", module_methods,
                               "hello C++ module.");

            Py_INCREF(&helloType);
            PyModule_AddObject(m, "Hello", (PyObject *)&helloType);
        }
        catch ( const std::exception & e )
        {
            std::cerr << e.what();
        }
    }
\endcode

Example:

    \code
    In [2]: hello = crappy2.technical.helloModule.Hello("world")

    In [3]: hello.
    hello.get_name   hello.say_hello

    In [3]: hello.get_name()
    Out[3]: 'world'

    In [4]: hello.say_hello()
    Hello world

    In [5]: hello = crappy2.technical.helloModule.Hello()

    In [6]: hello.say_hello()
    Hello Crappy

    In [7]: hello.get_name()
    Out[7]: 'Crappy'

    \endcode
*/
